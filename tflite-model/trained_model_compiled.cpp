/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 26.10.2022 08:43:45

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 2488512;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,320,320,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0035828372929245234, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -85, -110, -30, 
  /* [0][1][][] */ 67, -37, 17, 
  /* [0][2][][] */ 32, 127, 20, 
  /* [1][0][][] */ 106, -95, -10, 
  /* [1][1][][] */ -127, 105, 24, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 121, 126, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 25, -58, -1, 
  /* [4][1][][] */ 24, -127, 1, 
  /* [4][2][][] */ 13, -89, -13, 
  /* [5][0][][] */ -63, 29, -1, 
  /* [5][1][][] */ -127, 34, 3, 
  /* [5][2][][] */ -89, 26, -1, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -49, 56, -14, 
  /* [6][2][][] */ -34, -50, -86, 
  /* [7][0][][] */ 38, 32, -13, 
  /* [7][1][][] */ 127, 75, -6, 
  /* [7][2][][] */ 32, 3, -24, 
  /* [8][0][][] */ -21, -30, 53, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -20, 50, -13, 
  /* [9][1][][] */ -12, 127, -14, 
  /* [9][2][][] */ -5, 87, -8, 
  /* [10][0][][] */ 24, 87, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 113, 5, 
  /* [12][2][][] */ -79, 78, 4, 
  /* [13][0][][] */ 77, 15, -21, 
  /* [13][1][][] */ 127, 91, -20, 
  /* [13][2][][] */ 88, 111, 43, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -81, -20, 23, 
  /* [15][1][][] */ -127, -120, 18, 
  /* [15][2][][] */ -11, -59, 5, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.11320697516202927, 0.32944008708000183, 0.14346460998058319, 0.09049687534570694, 0.0087792584672570229, 0.01069943793118, 0.076571501791477203, 0.0093165943399071693, 0.075813502073287964, 0.012453841976821423, 0.23125046491622925, 0.259144127368927, 0.13331466913223267, 0.0059789586812257767, 0.26746577024459839, 0.014792806468904018, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 666, -22, 244, 595, 46794, 40022, 1360, 8047, 3261, 7307, 588, 67, 3942, 2304, 56, 22301, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00040560218621976674, 0.0011803301749750972, 0.0005140103748999536, 0.00032423558877781034, 3.1454655982088298e-05, 3.8334346754709259e-05, 0.00027434324147179723, 3.3379841624991968e-05, 0.00027162744663655758, 4.4620090193348005e-05, 0.00082853279309347272, 0.00092847127234563231, 0.0004776447603944689, 2.1421636120066978e-05, 0.00095828634221106768, 5.3000218031229451e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 0,1,-1,-3,-19,11,11,15,-7,-11,-5,-6,-4,-8,2,-1, 3,-8,-3,-3,14,-1,14,-27,-6,9,-11,86,-9,20,5,-2, -1,-5,-10,-4,1,-13,-2,10,3,2,-6,-7,0,-4,-5,-1, 
  /* [0][1][][] */ 10,-11,1,2,127,-23,-127,-22,127,127,-6,-5,114,-25,-1,-17, -127,127,127,-3,-85,-90,-13,-103,18,-106,127,127,127,127,127,127, 18,-4,-7,-4,-10,127,3,-11,0,-13,-12,-4,7,-3,-14,-8, 
  /* [0][2][][] */ 0,0,-3,-13,-17,16,51,6,-9,-8,-4,1,-3,1,-4,-10, 19,-17,-8,-127,8,-15,-11,127,-4,1,-3,-13,-8,-56,-12,-36, 0,-2,-8,-4,2,-4,-3,-3,2,2,-6,1,-2,-4,-8,-11, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0041578751988708973, 0.0088022928684949875, 0.008229491300880909, 0.0082427458837628365, 0.063083834946155548, 0.051017768681049347, 0.0075778062455356121, 0.053774803876876831, 0.012175115756690502, 0.066231735050678253, 0.0086765401065349579, 0.0089980494230985641, 0.0046901078894734383, 0.012878188863396645, 0.0088772010058164597, 0.031311105936765671, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 23377, -728, -175, 4030, -1040, -41, 9163, 1106, -501, 202, -1356, 2653, -147, -1000, -369, -940, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 9.7832358733285218e-05, 0.00020711278193630278, 0.00019363508909009397, 0.00019394696573726833, 0.0014843255048617721, 0.0012004181044176221, 0.00017830132856033742, 0.0012652894947677851, 0.00028647331055253744, 0.0015583938220515847, 0.00020415388280525804, 0.00021171881235204637, 0.00011035548232030123, 0.00030301621882244945, 0.0002088753244606778, 0.00073673191945999861, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -12,-12,-18,-66,-26,-33,18,-18,39,9,-30,-4,110,127,-17,-104, 
  /* [1][0][][] */ 127,-56,-40,11,-47,72,-70,-45,-39,85,-32,-50,-9,4,-60,-20, 
  /* [2][0][][] */ -34,-98,42,38,44,-59,-80,-23,30,-92,24,-127,45,-20,-74,27, 
  /* [3][0][][] */ 38,10,14,20,-14,65,-52,-19,127,41,8,20,6,-15,8,23, 
  /* [4][0][][] */ -90,-38,-23,-127,-4,34,50,-114,31,-23,-47,-38,-114,32,-41,-23, 
  /* [5][0][][] */ 84,54,74,-21,50,-46,-127,-119,-17,-75,64,52,-57,51,67,-43, 
  /* [6][0][][] */ 117,42,-127,-88,24,-75,-2,-101,-45,25,-122,100,91,-97,11,73, 
  /* [7][0][][] */ -127,-3,98,-23,-65,1,-1,-58,-51,59,83,-33,62,-26,27,28, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0080978637561202049, 0.0095002604648470879, 0.0072050984017550945, 0.010201612487435341, 0.007879946380853653, 0.0066242888569831848, 0.0070383991114795208, 0.012023458257317543, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -7437, -2636, 11842, -10018, 22434, 7340, -8613, 11042, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0001905379758682102, 0.00022353554959408939, 0.00016953173326328397, 0.00024003794533200562, 0.00018541050667408854, 0.00015586562221869826, 0.00016560939548071474, 0.00028290491900406778, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -48,29,0,-15,-87,-43,-127,36, 
  /* [1][0][][] */ 80,-85,-59,-56,127,-100,102,22, 
  /* [2][0][][] */ -101,125,-63,-127,55,-6,-46,52, 
  /* [3][0][][] */ 44,22,103,-2,99,127,108,-2, 
  /* [4][0][][] */ -89,-127,74,11,-79,-119,-2,-40, 
  /* [5][0][][] */ 127,-19,73,72,-75,-16,-1,-28, 
  /* [6][0][][] */ 28,33,127,-26,44,-39,-41,27, 
  /* [7][0][][] */ 26,7,-127,-32,-40,101,97,-70, 
  /* [8][0][][] */ 3,127,-30,16,68,109,45,60, 
  /* [9][0][][] */ -5,122,-66,96,4,-111,33,127, 
  /* [10][0][][] */ 1,-127,-5,-25,-75,-118,-53,-79, 
  /* [11][0][][] */ -127,-82,113,51,-5,-65,109,67, 
  /* [12][0][][] */ -18,46,-127,88,36,-48,-79,108, 
  /* [13][0][][] */ 92,-127,97,86,11,43,42,-53, 
  /* [14][0][][] */ -27,94,-39,-127,-21,-94,-22,-59, 
  /* [15][0][][] */ 40,113,30,-17,36,-68,93,-127, 
  /* [16][0][][] */ -120,-127,-63,92,-60,20,-21,77, 
  /* [17][0][][] */ -25,-108,-127,83,-59,65,-60,70, 
  /* [18][0][][] */ -96,-80,-57,88,-3,71,2,127, 
  /* [19][0][][] */ 59,-123,103,-127,10,-69,37,-35, 
  /* [20][0][][] */ -4,78,35,11,46,127,77,-10, 
  /* [21][0][][] */ 28,113,44,-32,42,-66,94,-127, 
  /* [22][0][][] */ 25,10,97,14,-7,127,29,-34, 
  /* [23][0][][] */ -97,-66,32,-72,83,82,-65,-127, 
  /* [24][0][][] */ -101,-107,31,-86,107,117,-54,-127, 
  /* [25][0][][] */ 127,8,-61,-13,12,31,-64,-12, 
  /* [26][0][][] */ -127,-32,-123,-26,-48,-28,24,2, 
  /* [27][0][][] */ 75,30,-5,-56,-127,-27,79,88, 
  /* [28][0][][] */ -127,-98,-3,59,-79,-113,17,3, 
  /* [29][0][][] */ 104,98,35,-127,21,6,-53,-84, 
  /* [30][0][][] */ -84,-67,31,-68,65,72,-55,-127, 
  /* [31][0][][] */ 46,40,-7,127,0,-73,2,8, 
  /* [32][0][][] */ -29,127,-8,31,20,66,-17,42, 
  /* [33][0][][] */ -33,127,-78,33,15,-20,-32,11, 
  /* [34][0][][] */ -125,-127,-41,113,-19,21,23,97, 
  /* [35][0][][] */ -53,127,-27,-3,68,110,62,71, 
  /* [36][0][][] */ 68,28,-4,-45,-127,-33,95,109, 
  /* [37][0][][] */ -66,108,24,26,-127,104,-20,-101, 
  /* [38][0][][] */ 32,32,25,15,127,67,105,49, 
  /* [39][0][][] */ -26,-72,40,-23,8,33,-102,127, 
  /* [40][0][][] */ -74,-49,-66,127,-29,5,10,65, 
  /* [41][0][][] */ 127,-1,47,95,-56,-10,-5,-15, 
  /* [42][0][][] */ -38,9,-67,-127,53,-103,2,82, 
  /* [43][0][][] */ 21,-5,79,-4,34,127,86,10, 
  /* [44][0][][] */ -29,-30,-70,127,42,4,-43,-45, 
  /* [45][0][][] */ 65,127,119,-114,44,-54,28,-122, 
  /* [46][0][][] */ -38,-127,-41,28,-14,33,-63,111, 
  /* [47][0][][] */ 40,50,124,2,102,127,125,-22, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0041595315560698509, 0.0040968521498143673, 0.0027464544400572777, 0.0029553696513175964, 0.0006325080175884068, 0.003209997434169054, 0.0054521230049431324, 0.0019345928449183702, 0.0028967065736651421, 0.0050972318276762962, 0.0029897715430706739, 0.0026543640997260809, 0.0023284121416509151, 0.0037761027924716473, 0.0032710402738302946, 0.0037994061131030321, 0.0026514623314142227, 0.00096612831111997366, 0.0027601195033639669, 0.0035503418184816837, 0.0035059766378253698, 0.0022907031234353781, 0.0046541476622223854, 0.0030744376126676798, 0.0039778989739716053, 0.007387891411781311, 0.0032197057735174894, 0.0073759835213422775, 0.0022911457344889641, 0.0008142701699398458, 0.0032270951196551323, 0.0077291848137974739, 0.0040139323100447655, 0.0039041100535541773, 0.0034673565533012152, 0.0033098394051194191, 0.0036837290972471237, 0.0060720671899616718, 0.0037153763696551323, 0.0056357481516897678, 0.0039788386784493923, 0.0036099315620958805, 0.0032878017518669367, 0.0045216255821287632, 0.00407836539670825, 0.0026146883610635996, 0.0030995979905128479, 0.0029171416535973549, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 1168, -449, -644, 1340, 16151, 2065, -453, 4776, 1412, 1268, 270, 3524, 999, 521, -972, 354, 2776, 9898, 2829, -612, 1255, -1096, -75, 2459, -440, -752, 1573, -51, 3421, 11947, 2224, -40, 494, -203, 1982, 48, 469, -169, 1161, 1060, 1344, 1714, 301, -313, 667, 1950, 1236, -208, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00041880045318976045, 0.00041248960769735277, 0.00027652544667944312, 0.00029755997820757329, 6.3683764892630279e-05, 0.00032319707679562271, 0.00054894440108910203, 0.00019478355534374714, 0.00029165353043936193, 0.00051321234786882997, 0.00030102371238172054, 0.00026725337374955416, 0.00023443506506737322, 0.00038019512430764735, 0.00032934313639998436, 0.00038254138780757785, 0.00026696122949942946, 9.7274169092997909e-05, 0.00027790133026428521, 0.00035746447974815965, 0.0003529975947458297, 0.00023063835396897048, 0.00046860062866471708, 0.00030954828253015876, 0.00040051285759545863, 0.00074384635081514716, 0.00032417452894151211, 0.00074264738941565156, 0.00023068291193339974, 8.198440627893433e-05, 0.00032491853926330805, 0.00077820930164307356, 0.00040414085378870368, 0.0003930834645871073, 0.00034910914837382734, 0.00033324959804303944, 0.00037089450052008033, 0.00061136321164667606, 0.00037408090429380536, 0.00056743260938674212, 0.00040060747414827347, 0.0003634642343968153, 0.00033103075111284852, 0.0004552577156573534, 0.00041062827222049236, 0.0002632586401887238, 0.00031208153814077377, 0.00029371102573350072, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -75,-93,-22,-21,127,-60,69,-51,-86,-82,-30,-63,112,35,73,-127,56,-29,-1,-32,-83,113,15,19,-16,86,70,-31,81,-74,22,-33,-110,-84,45,83,24,75,110,-82,-126,-12,34,60,44,-127,91,84, -86,-125,-88,45,-101,106,65,-64,-67,43,74,-120,127,92,115,-86,-77,-78,30,-48,-77,114,-65,98,-90,127,105,-120,95,-53,15,-127,-43,-90,75,127,113,114,127,-71,-127,-62,55,78,77,106,97,75, -8,-44,-65,93,-54,-35,21,-8,99,21,58,-86,29,68,-41,-10,-77,-14,26,-25,-28,30,-88,0,-73,61,19,-82,38,54,116,-61,19,14,-9,42,73,63,42,-1,-22,88,51,31,30,24,17,-120, 
  /* [0][1][][] */ -127,-98,-26,-69,-98,-81,100,-104,-127,-127,78,-84,106,50,-127,-74,127,-127,-64,-80,-85,127,-34,16,-4,91,109,-47,-105,-79,9,-51,-108,-127,-127,78,46,84,3,-101,58,-15,88,106,82,106,127,-127, -117,-127,-124,-95,-41,127,127,-127,99,64,127,-127,111,127,77,-107,53,-95,-127,-127,-127,111,-127,127,-127,124,127,-127,-127,127,-7,-120,-127,-109,44,119,127,127,-16,-127,104,-92,127,127,127,-6,125,119, -68,-59,-127,127,72,-51,50,-28,76,27,25,-50,12,79,81,-51,-17,-4,-17,-81,-41,26,-90,-15,-106,49,25,-90,-50,38,127,-81,-53,12,58,62,79,75,-29,-30,46,127,68,29,47,-53,15,25, 
  /* [0][2][][] */ -118,-18,20,25,-51,-35,22,-41,36,-45,22,-57,23,27,-43,-19,-82,-34,87,-38,-52,48,-54,-7,-3,65,71,-17,41,56,0,-10,0,-92,-40,33,11,17,-70,-54,16,-8,47,27,32,51,16,-68, -100,-27,-39,-66,96,38,61,-52,106,20,-37,-82,-5,45,-123,-77,34,-4,44,-77,-73,45,-67,59,-66,70,77,-35,43,2,-19,-42,-63,-22,-61,37,32,24,-115,-64,30,-36,85,59,48,-111,31,4, -44,-10,-49,-15,-20,-17,23,-26,-64,12,-10,-31,-13,22,43,-31,32,28,-8,-67,-57,5,-29,-26,-62,26,24,-32,15,-68,53,-23,-59,26,25,33,27,26,-62,-31,-3,56,14,19,18,-11,8,40, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0030055216047912836, 0.0040984600782394409, 0.0068726632744073868, 0.007047614548355341, 0.026005666702985764, 0.0062043238431215286, 0.0072563225403428078, 0.0045799226500093937, 0.0048029832541942596, 0.0033216113224625587, 0.0029457188211381435, 0.0019462174968793988, 0.0035683915484696627, 0.0027576114516705275, 0.0095328837633132935, 0.0062098703347146511, 0.0057598571293056011, 0.014845086261630058, 0.006671530194580555, 0.0061215213499963284, 0.0038444963283836842, 0.014937330968677998, 0.0054184533655643463, 0.010851233266294003, 0.0044512907043099403, 0.0033216446172446012, 0.002431362634524703, 0.00404372438788414, 0.0071971472352743149, 0.040059253573417664, 0.010396578349173069, 0.0034202390816062689, 0.0045559098944067955, 0.0059605552814900875, 0.0076018781401216984, 0.0026328698731958866, 0.0041221738792955875, 0.0023654017131775618, 0.0050232573412358761, 0.0029904465191066265, 0.0069324499927461147, 0.0058939582668244839, 0.0033262672368437052, 0.0036700812634080648, 0.0034736273810267448, 0.015009862370789051, 0.0028978143818676472, 0.0075595797970890999, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 15269, 5782, 4958, -851, 3008, 510, -816, 30831, -2197, 1982, 6450, 68280, 1459, 1149, -375, 11957, -1239, 14923, 1066, 8970, 13583, -139, 4712, -9786, 12417, 1444, 780, 13057, -1141, -386, -11425, 10917, 5930, 1632, -565, 3753, -9200, 5447, 751, 19909, -525, -1817, 3328, 1174, 914, 328, 787, -732, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 7.0718153438065201e-05, 9.6434356237296015e-05, 0.0001617097295820713, 0.00016582623356953263, 0.000611898023635149, 0.00014598410052713007, 0.00017073701019398868, 0.00010776289127534255, 0.00011301137419650331, 7.8155564551707357e-05, 6.9311034167185426e-05, 4.5793352910550311e-05, 8.3962157077621669e-05, 6.4884974563028663e-05, 0.00022430314857047051, 0.00014611460210289806, 0.00013552604650612921, 0.00034929614048451185, 0.00015697718481533229, 0.00014403580280486494, 9.0458735940046608e-05, 0.00035146661684848368, 0.00012749302550218999, 0.00025532313156872988, 0.00010473625297890976, 7.8156343079172075e-05, 5.7208533689845353e-05, 9.5146460807882249e-05, 0.00016934463928919286, 0.00094257068121805787, 0.00024462537840008736, 8.0476216680835932e-05, 0.00010719788406277075, 0.00014024836127646267, 0.00017886771820485592, 6.1949882365297526e-05, 9.6992327598854899e-05, 5.5656513723079115e-05, 0.00011819429346360266, 7.0363450504373759e-05, 0.00016311647777911276, 0.00013868136738892645, 7.8265111369546503e-05, 8.6354855739045888e-05, 8.1732410762924701e-05, 0.00035317323636263609, 6.8183871917426586e-05, 0.00017787246906664222, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -42,-8,30,9,-35,-15,8,9,-37,-6,-62,-53,-27,-66,-9,-32,41,-37,38,41,-14,33,-38,11,4,-42,52,-11,-4,-19,15,14,82,34,36,-127,15,-5,-23,-33,2,-18,44,43,33,7,24,0, 
  /* [1][0][][] */ -7,36,62,-31,-13,45,-49,-27,8,32,-14,-87,8,89,-13,63,-20,16,-21,-60,17,-78,-26,21,-72,-6,-2,-115,-26,-22,28,-55,56,82,-34,-1,127,-30,-5,42,-25,36,-81,-30,122,-17,-30,-27, 
  /* [2][0][][] */ -11,-23,-62,7,0,47,25,8,-7,39,3,26,63,-93,17,-61,39,-91,23,33,-17,49,1,27,-14,61,-19,-68,17,7,16,-67,-40,-85,27,-31,102,24,-15,-61,3,27,79,22,127,18,19,22, 
  /* [3][0][][] */ -8,26,-71,42,16,-39,-73,-103,15,-27,-37,-3,4,28,33,76,-9,12,-37,22,3,-102,31,-58,-73,-11,127,-15,-39,7,-67,14,-1,-80,8,-10,-23,-38,-21,104,-51,-36,1,20,36,5,-41,44, 
  /* [4][0][][] */ -29,-46,-9,7,31,-29,-14,-10,32,-27,56,-79,5,29,8,10,-19,-28,13,-14,-3,-55,6,-20,17,-9,40,47,35,20,-13,25,-10,-1,2,0,-71,83,35,-25,28,-25,-20,-23,-77,13,127,10, 
  /* [5][0][][] */ 48,-20,0,20,28,-44,32,-127,29,-26,-10,119,-78,70,26,-65,-2,-95,18,2,-36,64,-37,-55,-59,77,-23,3,-22,48,-48,-37,29,55,42,-4,-45,-6,-43,-46,21,-37,-44,-5,-32,60,94,23, 
  /* [6][0][][] */ 50,-23,21,-10,-36,-19,-38,20,-41,5,-39,127,-43,-38,-6,56,13,45,12,33,42,-83,-19,21,19,41,-62,5,3,-40,16,38,9,13,-16,-4,13,1,-2,-4,-7,-17,39,53,-2,-37,73,-14, 
  /* [7][0][][] */ -27,8,-8,70,34,28,3,23,27,3,64,-5,122,105,58,49,39,43,-9,1,20,-22,-85,-27,13,-1,-26,58,35,-25,-33,-17,37,5,45,-89,-72,40,41,53,-30,35,85,127,-54,-29,-104,60, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0091108977794647217, 0.0050303791649639606, 0.0057638976722955704, 0.0061005866155028343, 0.0077503942884504795, 0.0058128735981881618, 0.010382066480815411, 0.0061016674153506756, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 7587, 14490, -4987, 7683, 27, 3144, -11372, -17811, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00021437407121993601, 0.00011836186604341492, 0.00013562112872023135, 0.00014354322047438473, 0.00018236221512779593, 0.00013677349488716573, 0.00024428393226116896, 0.00014356864267028868, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 67,127,-96,-92,4,87,11,77, 
  /* [1][0][][] */ 58,-78,44,-127,-56,68,-94,-38, 
  /* [2][0][][] */ -40,125,124,57,127,9,50,20, 
  /* [3][0][][] */ 115,46,-92,70,-3,-113,-127,-36, 
  /* [4][0][][] */ -39,24,19,-69,-25,127,115,37, 
  /* [5][0][][] */ 33,77,-127,-71,41,87,30,-19, 
  /* [6][0][][] */ 4,127,58,60,76,8,10,-97, 
  /* [7][0][][] */ 127,-27,-42,29,8,1,118,16, 
  /* [8][0][][] */ 57,127,71,91,105,89,105,-88, 
  /* [9][0][][] */ 58,103,-127,-102,7,91,5,77, 
  /* [10][0][][] */ -67,-41,26,-47,-8,-29,-47,127, 
  /* [11][0][][] */ 12,-121,-127,-21,16,-11,42,-12, 
  /* [12][0][][] */ -24,-96,-98,-12,-127,22,-51,42, 
  /* [13][0][][] */ -12,6,-98,94,-127,-22,2,-12, 
  /* [14][0][][] */ -68,-41,-127,-6,33,0,-13,-53, 
  /* [15][0][][] */ 24,-101,-127,10,-95,-29,-30,-6, 
  /* [16][0][][] */ 127,-64,-17,68,-81,19,26,101, 
  /* [17][0][][] */ -29,117,127,-23,-44,-10,-29,-19, 
  /* [18][0][][] */ 12,-127,43,60,-1,-67,47,-87, 
  /* [19][0][][] */ 127,-42,-62,40,-100,6,37,92, 
  /* [20][0][][] */ -32,-127,80,73,-15,-90,-4,-82, 
  /* [21][0][][] */ -8,-47,-12,-33,127,-5,42,26, 
  /* [22][0][][] */ -127,31,-83,50,47,59,-100,-105, 
  /* [23][0][][] */ -100,-54,58,-7,-107,127,117,-51, 
  /* [24][0][][] */ -37,62,7,-32,-21,120,127,4, 
  /* [25][0][][] */ -32,-89,-127,-59,-48,-26,-39,-39, 
  /* [26][0][][] */ -24,54,-14,127,-114,47,-47,5, 
  /* [27][0][][] */ 13,-115,23,70,9,-56,-2,-127, 
  /* [28][0][][] */ 3,127,81,64,120,-12,37,-62, 
  /* [29][0][][] */ 115,17,-44,-26,81,-127,-115,22, 
  /* [30][0][][] */ 29,-7,28,-127,18,-25,19,-24, 
  /* [31][0][][] */ 42,-37,5,63,-8,28,9,127, 
  /* [32][0][][] */ -100,-83,5,-76,-71,127,57,118, 
  /* [33][0][][] */ -26,61,55,-37,39,127,-124,73, 
  /* [34][0][][] */ 31,127,-73,-55,22,55,-69,70, 
  /* [35][0][][] */ 3,-127,35,54,-16,-59,46,-68, 
  /* [36][0][][] */ -24,-43,-84,2,-127,-65,-22,20, 
  /* [37][0][][] */ -55,-127,67,67,-51,-103,-25,-54, 
  /* [38][0][][] */ -71,22,60,-71,-127,-88,-62,81, 
  /* [39][0][][] */ 82,-127,73,45,-11,-75,-21,-85, 
  /* [40][0][][] */ 7,62,29,46,-127,-17,-70,22, 
  /* [41][0][][] */ 116,120,-89,-127,48,26,-4,15, 
  /* [42][0][][] */ -10,-34,-12,16,127,9,45,18, 
  /* [43][0][][] */ 127,25,76,20,-67,-26,58,97, 
  /* [44][0][][] */ 82,29,-32,-5,60,-118,-127,6, 
  /* [45][0][][] */ 54,18,18,11,75,-127,1,-57, 
  /* [46][0][][] */ 54,-39,-8,127,38,62,20,76, 
  /* [47][0][][] */ -74,-72,48,69,-33,5,127,-51, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0035073193721473217, 0.0027003583963960409, 0.00082632596604526043, 0.0023838798515498638, 0.0029890148434787989, 0.0041401442140340805, 0.002006111666560173, 0.00073441851418465376, 0.0019960640929639339, 0.0035417396575212479, 0.0029116312507539988, 0.002788325771689415, 0.00089899695012718439, 0.0039101387374103069, 0.0035319717135280371, 0.00074129627319052815, 0.0048228749074041843, 0.002703673904761672, 0.0042214025743305683, 0.0031539651099592447, 0.0033587205689400434, 0.0030577164143323898, 0.0055495989508926868, 0.00065735739190131426, 0.0020417487248778343, 0.0022949280682951212, 0.0010850266553461552, 0.0039595142006874084, 0.0016802926547825336, 0.0018236999167129397, 0.0066364221274852753, 0.0057948636822402477, 0.0026549973990768194, 0.0028014376293867826, 0.0041704420000314713, 0.004644391592592001, 0.0028614397160708904, 0.0041562668047845364, 0.0032847896218299866, 0.0031333670485764742, 0.0025845461059361696, 0.0029921869281679392, 0.0031482924241572618, 0.0032575740478932858, 0.0020959135144948959, 0.0031060015317052603, 0.004709082655608654, 0.0022329892963171005, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 2482, 4453, 17806, 1888, 2507, -1264, 5935, 20589, 3965, -1022, 4355, -2647, 15791, -1663, 2099, 21719, -397, 2546, 217, 3002, 3082, 3781, 432, 23990, 5852, 3546, 13896, 1551, 6635, 6000, 625, 1070, 1188, 1988, -320, 132, -2688, -766, 2637, 2772, 4419, 2718, 3711, 3536, 5193, 3176, 2177, 5352, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00023314220015890896, 0.0001795010466594249, 5.4928401368670166e-05, 0.00015846375026740134, 0.00019868891104124486, 0.00027520800358615816, 0.00013335235416889191, 4.8819034418556839e-05, 0.00013268445036374032, 0.00023543021234218031, 0.00019354499818291515, 0.00018534850096330047, 5.975906242383644e-05, 0.00025991883012466133, 0.00023478090588469058, 4.9276219215244055e-05, 0.00032059117802418768, 0.00017972143541555852, 0.00028060947079211473, 0.00020965366275049746, 0.00022326437465380877, 0.00020325572404544801, 0.00036889873445034027, 4.3696545617422089e-05, 0.00013572126044891775, 0.00015255085600074381, 7.2125025326386094e-05, 0.00026320095639675856, 0.00011169417120981961, 0.00012122688349336386, 0.00044114317279309034, 0.00038520223461091518, 0.00017648575885687023, 0.0001862200879259035, 0.00027722198865376413, 0.00030872685601934791, 0.00019020860781893134, 0.00027627969393506646, 0.00021834996005054563, 0.00020828444394282997, 0.00017180264694616199, 0.0001988997682929039, 0.00020927657897118479, 0.00021654086594935507, 0.00013932175352238119, 0.00020646538177970797, 0.00031302706338465214, 0.0001484335953136906, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 15,-26,8,8,-30,-111,-37,51,-38,-5,-25,11,48,-5,-11,4,105,16,28,-4,7,-33,-62,17,10,-15,-8,-10,-78,76,-7,-98,41,-9,-57,-52,-9,-25,1,-15,-20,23,11,3,-16,56,127,-9, -127,-81,-24,127,-74,90,-91,127,38,12,2,4,53,20,-5,-43,-24,65,26,6,0,115,16,127,127,-28,-53,41,63,-117,-1,-74,57,-7,-45,-122,24,8,-72,-55,-127,-5,-96,-127,34,53,59,114, -7,5,10,8,-30,46,38,46,6,-36,-18,11,-19,-2,-5,7,-57,37,-66,-18,-2,-37,127,26,-27,8,0,0,18,42,19,3,-9,-18,-43,84,8,3,11,62,22,-14,31,-36,-12,36,-16,-15, 
  /* [0][1][][] */ -4,-11,-29,0,22,-127,127,-68,-14,8,1,41,127,15,2,-33,-18,-30,23,45,76,-75,41,5,-54,127,-73,-3,127,-89,43,-127,-45,1,-83,16,9,-51,-44,8,112,127,13,-116,-66,-64,1,81, 105,-127,127,3,127,68,-67,-50,36,127,127,-127,-85,127,127,127,127,127,106,127,127,111,6,4,104,-100,-127,127,32,127,127,-8,-127,127,127,127,-127,127,-127,-127,36,42,-127,-39,127,-127,-15,74, 28,30,-41,-5,-55,123,-118,89,112,-74,-3,72,-32,6,16,-64,15,12,-127,20,33,-127,-30,-3,72,-11,-24,121,-85,-31,25,-44,-29,15,95,-16,36,-1,-3,-104,105,9,37,37,-56,76,92,-86, 
  /* [0][2][][] */ 6,29,6,-31,-2,-71,-16,9,-3,4,-14,5,-9,-9,-2,-3,-49,3,3,-26,5,-30,82,-10,-92,6,44,-6,3,4,-9,25,-14,-17,-75,32,-2,-2,14,47,-30,14,8,11,-17,8,-9,2, 45,-14,-36,-34,26,36,116,-98,127,-24,-26,13,-64,-18,-21,-70,-20,90,-2,28,19,24,-20,-25,-67,61,81,10,-112,15,-42,-19,-32,-6,-40,6,51,-12,-1,124,-116,6,-10,55,36,43,10,-127, -5,28,3,-22,-17,-8,-6,-53,-36,-18,-29,11,22,-11,-6,11,41,27,-31,-14,9,-30,-44,-9,21,-21,22,3,-22,7,-19,5,22,-18,-27,-43,-6,10,28,21,-11,-5,9,4,-14,2,59,-56, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.011454541236162186, 0.0075747380033135414, 0.042941879481077194, 0.012684850953519344, 0.01263075228780508, 0.010441871359944344, 0.012661246582865715, 0.020455706864595413, 0.0040842853486537933, 0.013494669459760189, 0.014098736457526684, 0.067066535353660583, 0.028118647634983063, 0.022979013621807098, 0.016572428867220879, 0.033030305057764053, 0.0070907706394791603, 0.0026921923272311687, 0.011464035138487816, 0.011920645833015442, 0.010653279721736908, 0.010300729423761368, 0.0034895031712949276, 0.024871375411748886, 0.0091994581744074821, 0.020825587213039398, 0.018708180636167526, 0.0083086350932717323, 0.012017103843390942, 0.023436367511749268, 0.0067637534812092781, 0.004820430651307106, 0.0051916507072746754, 0.010527733713388443, 0.0061203651130199432, 0.013022126629948616, 0.069925300776958466, 0.017877202481031418, 0.0054317978210747242, 0.0087799848988652229, 0.007607167586684227, 0.0058555477298796177, 0.012864298187196255, 0.0081651369109749794, 0.021187510341405869, 0.0052295397035777569, 0.0026541948318481445, 0.0095784431323409081, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -1496, 8042, -399, -462, 1938, -1071, 1601, -2447, -4125, -149, -1011, -314, -1745, -913, -2492, 4273, 6857, 3214, 705, -4550, -8640, 2462, 18218, -4989, -3193, -1109, 5571, -8688, 1832, -980, -7557, 10313, 6324, 219, 4383, -713, 52, -876, 11638, 976, 6668, -3804, 2526, 5937, -667, 6794, -814, 1192, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00026951861218549311, 0.0001782291365088895, 0.0010103972163051367, 0.00029846708639524877, 0.00029719417216256261, 0.00024569110246375203, 0.00029791169799864292, 0.00048131076619029045, 9.6100833616219461e-05, 0.00031752162612974644, 0.00033173497649841011, 0.0015780361136421561, 0.00066161522408947349, 0.00054068269673734903, 0.00038993952330201864, 0.00077718368265777826, 0.00016684166621416807, 6.3345702074002475e-05, 0.000269742013188079, 0.00028048577951267362, 0.00025066541275009513, 0.00024237010802607983, 8.2105958426836878e-05, 0.00058520882157608867, 0.00021645784727297723, 0.00049001380102708936, 0.00044019249617122114, 0.00019549729768186808, 0.00028275538352318108, 0.00055144395446404815, 0.0001591471373103559, 0.00011342189827701077, 0.00012215648894198239, 0.00024771137395873666, 0.0001440085907233879, 0.00030640297336503863, 0.0016453012358397245, 0.00042064007720910013, 0.00012780701217707247, 0.00020658787980210036, 0.00017899218073580414, 0.00013777759158983827, 0.00030268938280642033, 0.00019212087499909103, 0.00049852964002639055, 0.00012304799747653306, 6.2451646954286844e-05, 0.00022537512995768338, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -42,-48,-18,-69,-3,-20,89,81,-102,-75,-38,2,-61,-6,-55,35,-82,10,8,127,56,-26,17,93,72,76,26,5,-88,-59,-80,-56,-52,102,29,-33,31,-31,97,-7,21,12,-5,-99,33,-32,-33,-87, 
  /* [1][0][][] */ -13,47,-26,-19,-74,58,-22,-47,-36,67,-20,19,55,44,-45,-7,-17,-120,78,-48,127,13,-57,24,54,-4,-72,60,34,-11,75,36,-21,-22,4,-15,3,109,-20,-32,58,38,-2,11,115,8,-34,63, 
  /* [2][0][][] */ -27,-36,120,16,88,-45,-9,23,-33,-2,-10,49,9,-50,-44,-127,-48,-96,-22,17,-101,18,-36,-38,-51,12,-1,-50,-39,7,-30,-9,-4,-5,32,-3,31,-32,-45,13,30,-34,29,-44,-34,-47,-65,-53, 
  /* [3][0][][] */ 47,19,57,18,26,-35,27,69,-57,-23,44,-30,-74,54,-21,52,58,25,-35,25,-107,-73,127,-8,7,-3,-67,-30,-67,68,109,-69,11,-112,-30,51,-21,-74,-18,73,-84,-54,59,-6,-100,-64,61,-10, 
  /* [4][0][][] */ 16,-16,73,-30,5,-12,-13,-9,-61,-7,-25,3,39,-78,35,-104,40,43,-9,-40,14,24,17,9,-1,2,61,-12,26,22,-127,-18,-20,-21,0,16,45,-1,33,0,-40,-10,-70,26,-19,-97,7,22, 
  /* [5][0][][] */ 34,-50,58,31,33,22,23,8,-80,-4,-44,30,36,4,11,-44,94,74,-1,-14,91,-57,127,-92,-12,50,6,51,15,15,-31,-52,-13,-44,-37,7,50,30,66,7,-76,28,30,25,55,-18,82,1, 
  /* [6][0][][] */ -53,55,-126,96,57,15,29,24,-19,-12,56,-74,-97,-17,-25,34,-120,34,-13,98,18,38,-92,-99,-13,-19,14,74,-32,-41,-44,18,33,73,-41,-25,-19,-11,87,2,71,63,-125,-59,-31,127,-60,-45, 
  /* [7][0][][] */ 32,69,-87,9,4,60,118,61,42,77,-95,0,-44,10,-72,-52,27,37,117,100,87,9,127,26,103,103,-41,95,-63,37,0,-78,27,-65,-20,15,10,88,-68,78,-50,53,3,-83,76,-32,51,-35, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0038357926532626152, 0.0038755042478442192, 0.0057316804304718971, 0.0044865240342915058, 0.0053521832451224327, 0.0058136023581027985, 0.003297045361250639, 0.003775300458073616, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 1942, 502, 22100, -3258, 5904, -16454, 3261, -14070, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 9.0253946837037802e-05, 9.1188339865766466e-05, 0.00013486307580024004, 0.00010556527558946982, 0.00012593372957780957, 0.00013679065159521997, 7.7577540650963783e-05, 8.8830602180678397e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 61,29,127,-42,64,106,-69,-51, 
  /* [1][0][][] */ 15,-77,-127,3,49,27,29,2, 
  /* [2][0][][] */ -127,-3,-42,-21,53,30,-61,-33, 
  /* [3][0][][] */ 41,67,127,-75,-14,-102,-8,-19, 
  /* [4][0][][] */ -127,21,-47,-25,47,21,-39,-55, 
  /* [5][0][][] */ -103,30,-64,-18,5,34,-90,-127, 
  /* [6][0][][] */ -39,-127,-126,44,108,17,14,49, 
  /* [7][0][][] */ -72,-127,-104,-74,-73,-80,24,97, 
  /* [8][0][][] */ 79,30,-5,0,101,-75,-127,12, 
  /* [9][0][][] */ -37,44,-45,88,-54,-42,127,-37, 
  /* [10][0][][] */ -26,127,30,64,122,-24,-9,61, 
  /* [11][0][][] */ -76,-32,-22,-18,-87,93,127,-5, 
  /* [12][0][][] */ 66,34,-127,34,-13,-33,-67,-12, 
  /* [13][0][][] */ 69,-36,-71,3,11,-127,-26,-27, 
  /* [14][0][][] */ 10,-75,72,15,127,-113,-51,14, 
  /* [15][0][][] */ -46,-42,-7,127,72,85,-75,31, 
  /* [16][0][][] */ 115,28,-31,19,84,-104,-127,-28, 
  /* [17][0][][] */ 58,127,52,73,49,62,28,-84, 
  /* [18][0][][] */ 24,-6,8,-2,127,-3,24,-9, 
  /* [19][0][][] */ 16,127,31,12,-125,17,24,-35, 
  /* [20][0][][] */ -42,15,69,-127,27,39,-19,101, 
  /* [21][0][][] */ -22,56,41,-127,26,53,-5,99, 
  /* [22][0][][] */ -75,-65,-89,19,-121,127,116,-20, 
  /* [23][0][][] */ 116,34,-127,2,10,-55,-65,-34, 
  /* [24][0][][] */ -46,41,9,-1,-33,72,-127,93, 
  /* [25][0][][] */ -97,-53,-127,7,-59,-71,64,94, 
  /* [26][0][][] */ 54,-12,-48,-33,101,-24,127,-46, 
  /* [27][0][][] */ 127,-65,21,85,-3,27,-23,98, 
  /* [28][0][][] */ 48,69,45,-12,127,-66,71,-39, 
  /* [29][0][][] */ -8,-16,-32,-41,-72,4,127,-39, 
  /* [30][0][][] */ 47,-127,-49,-70,-102,6,18,-54, 
  /* [31][0][][] */ 12,25,-8,-15,-127,10,-24,-9, 
  /* [32][0][][] */ 41,-68,-61,86,-13,-91,127,-127, 
  /* [33][0][][] */ 54,127,40,29,60,-20,-27,-24, 
  /* [34][0][][] */ -114,-35,127,-6,-25,97,96,9, 
  /* [35][0][][] */ -28,72,127,-16,-69,-63,-39,26, 
  /* [36][0][][] */ -85,4,91,-27,-19,127,71,20, 
  /* [37][0][][] */ -20,-75,-7,-127,-46,-83,74,49, 
  /* [38][0][][] */ 45,-15,88,-57,54,62,-127,10, 
  /* [39][0][][] */ -2,82,-127,-52,-25,-2,-3,68, 
  /* [40][0][][] */ 60,-49,17,33,13,8,10,127, 
  /* [41][0][][] */ -31,89,127,2,15,85,-67,21, 
  /* [42][0][][] */ 59,-127,-118,-27,-124,12,26,-85, 
  /* [43][0][][] */ -3,-84,24,-71,127,-37,19,37, 
  /* [44][0][][] */ 5,127,112,9,10,50,-74,19, 
  /* [45][0][][] */ -42,46,6,80,-113,58,-127,24, 
  /* [46][0][][] */ -48,-43,70,62,-119,-127,-26,-5, 
  /* [47][0][][] */ -13,56,41,-103,-127,33,-28,55, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0026957925874739885, 0.0040788226760923862, 0.0037870232481509447, 0.0031504142098128796, 0.0027086455374956131, 0.0026212660595774651, 0.0021359000820666552, 0.0015826909802854061, 0.0034908317029476166, 0.0033899133559316397, 0.0023413456510752439, 0.0024003973230719566, 0.0038332105614244938, 0.0034457221627235413, 0.0031221555545926094, 0.0017382137011736631, 0.0033071383368223906, 0.0024922611191868782, 0.0017443647375330329, 0.0034691407345235348, 0.0033827952574938536, 0.0031362683512270451, 0.0027556088753044605, 0.002325340872630477, 0.0023100844118744135, 0.0026343597564846277, 0.0027617651503533125, 0.0036734773311764002, 0.0013419255847111344, 0.0032250615768134594, 0.0023867718409746885, 0.0019436669535934925, 0.0021277761552482843, 0.0026917946524918079, 0.0029521032702177763, 0.0035578873939812183, 0.0032422426156699657, 0.002890777075663209, 0.0027938128914684057, 0.0021738947834819555, 0.0033908938057720661, 0.0010513392044231296, 0.001578593160957098, 0.003287607105448842, 0.0013191828038543463, 0.0025973005685955286, 0.0029265768826007843, 0.0024285290855914354, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 1673, -822, 714, -1616, 3217, -651, 4048, -4206, 995, 719, 2133, 3666, 366, -412, 516, 5065, -1493, 3548, 5897, 799, -831, 1913, -735, 3485, 2233, 1687, 1441, -661, 7463, -297, 1840, -1956, -575, 3211, -927, 1566, 1516, 854, 286, 3859, 1841, 10267, -4044, 1365, 7824, 255, 2263, 2738, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00024063944874797016, 0.00036409538006410003, 0.00033804797567427158, 0.00028122117510065436, 0.00024178676540032029, 0.00023398685152642429, 0.00019066075037699193, 0.00014127863687463105, 0.00031160848448053002, 0.00030260003404691815, 0.00020899981609545648, 0.00021427104366011918, 0.00034217088250443339, 0.00030758179491385818, 0.00027869865880347788, 0.00015516133862547576, 0.00029521112446673214, 0.00022247125161811709, 0.0001557104114908725, 0.00030967223574407399, 0.00030196463922038674, 0.00027995844720862806, 0.00024597893934696913, 0.00020757115271408111, 0.00020620928262360394, 0.00023515566135756671, 0.00024652847787365317, 0.00032791230478323996, 0.00011978675320278853, 0.00028788455529138446, 0.00021305476548150182, 0.00017350108828395605, 0.00018993557023350149, 0.0002402825775789097, 0.00026351897395215929, 0.00031759418197907507, 0.0002894182107411325, 0.00025804471806623042, 0.00024938920978456736, 0.00019405233615543693, 0.00030268754926510155, 9.3847607786301523e-05, 0.00014091284538153559, 0.00029346765950322151, 0.00011775662278523669, 0.00023184757446870208, 0.00026124037685804069, 0.00021678222401533276, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -109,66,-127,100,-96,54,-45,58,-73,-81,75,-48,52,-69,-45,-50,87,78,86,-109,91,-116,74,-86,-96,-58,68,127,-90,-56,-105,78,70,-95,74,-102,-72,-124,84,-46,-4,-95,120,-111,102,57,-92,-42, -116,94,-83,123,-79,102,-37,87,-119,-115,114,-65,86,-101,-64,-70,104,106,127,-127,115,-107,88,-127,-94,-82,86,119,31,-85,-126,90,93,-127,104,-107,-91,-127,107,-86,-82,92,127,-118,-34,96,-127,-61, -70,48,-15,37,-16,65,-33,35,-64,-48,52,-24,58,-41,-44,-21,55,56,72,-36,38,-58,32,-50,-76,-38,36,28,80,-38,-96,42,34,-80,43,-30,-30,-38,46,-56,-121,-60,75,-64,-78,68,-61,-43, 
  /* [0][1][][] */ -93,89,-60,98,-78,94,-116,114,-94,-104,81,-92,82,-87,-99,-93,94,90,-46,-104,112,-127,108,-74,-118,-86,83,118,-127,-84,-103,106,118,27,91,-119,-104,-119,97,-88,-98,-114,104,-127,127,66,-111,-98, -127,127,-108,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-53,-120,127,-108,127,-108,-124,-127,127,122,17,-127,-127,127,127,44,127,-127,-127,-102,127,-127,-127,127,111,-126,-55,127,-123,-127, -75,75,-100,30,-42,55,-67,99,-67,-36,51,-56,75,-51,-74,-23,73,65,-32,-27,31,-69,47,-49,-127,-53,49,46,97,-64,-80,50,46,12,44,-41,-33,-19,57,-78,-73,-93,44,-54,-99,87,-28,-76, 
  /* [0][2][][] */ -39,68,-20,62,-55,57,-86,60,-43,-55,11,-49,48,-65,-39,-65,54,40,-70,-23,29,-44,38,-31,-55,-52,26,23,-83,-49,-64,91,59,51,35,-71,-25,-60,28,-70,-114,-51,59,-107,87,41,-75,-71, -78,89,-101,58,-84,58,-98,76,-61,-62,34,-70,69,-87,-57,-66,73,56,-92,-22,28,-39,40,-48,-67,-76,41,57,3,-78,-92,110,65,68,55,-73,-42,-49,35,-90,-73,69,75,-115,-22,62,-80,-90, -39,65,-89,15,-32,16,-62,56,-15,-12,16,-30,38,-33,-33,-2,42,30,-57,-1,6,-18,13,-12,-55,-31,18,22,56,-36,-35,77,31,40,16,-18,5,-4,20,-54,-13,-46,19,-38,-52,55,-32,-61, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.003470646683126688, 0.0041364026255905628, 0.0024671431165188551, 0.0058292378671467304, 0.0041945567354559898, 0.0033445770386606455, 0.0020549106411635876, 0.0086522400379180908, 0.0043620290234684944, 0.0019724455196410418, 0.0028033733833581209, 0.0039196801371872425, 0.0027199655305594206, 0.003704652888700366, 0.0020492018666118383, 0.0031171499285846949, 0.0039652418345212936, 0.0025301000569015741, 0.0069732796400785446, 0.001877306611277163, 0.0028439925517886877, 0.002443589735776186, 0.0035429801791906357, 0.0039567905478179455, 0.0023302186746150255, 0.0028192622121423483, 0.0030220688786357641, 0.0016774048563092947, 0.013433507643640041, 0.0033569736406207085, 0.0018945344490930438, 0.0085854744538664818, 0.0051134559325873852, 0.0079172803089022636, 0.0038105454295873642, 0.0028237367514520884, 0.0041390885598957539, 0.0019369877409189939, 0.0035192733630537987, 0.0033616616856306791, 0.0022345511242747307, 0.0079582491889595985, 0.0081924479454755783, 0.0023903271649032831, 0.0070568425580859184, 0.0022418815642595291, 0.0017977848183363676, 0.0021249691490083933, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 15168, -1059, 22620, -403, 15998, -2113, 41400, 501, 11453, 43499, 1486, 24425, 1356, 12610, 36749, 24825, -110, 307, 2332, 49425, 725, 20610, 2093, 14534, 18783, 36803, -1700, -895, -877, 16748, 27207, -728, -1539, 293, 1209, 15640, 9118, 35351, 2738, 21592, 28983, 5342, 782, 17974, 754, 2456, 49436, 25954, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 8.1662277807481587e-05, 9.7327123512513936e-05, 5.8050427469424903e-05, 0.00013715853856410831, 9.8695454653352499e-05, 7.8695935371797532e-05, 4.8350841097999364e-05, 0.00020358212350402027, 0.00010263598232995719, 4.6410485083470121e-05, 6.596172897843644e-05, 9.2227768618613482e-05, 6.3999192207120359e-05, 8.7168307800311595e-05, 4.8216516006505117e-05, 7.334470865316689e-05, 9.3299808213487267e-05, 5.9531768783926964e-05, 0.00016407716611865908, 4.4171920308144763e-05, 6.6917469666805118e-05, 5.7496228691888973e-05, 8.3364240708760917e-05, 9.3100956291891634e-05, 5.4828677093610168e-05, 6.6335582232568413e-05, 7.1107504481915385e-05, 3.9468352042604238e-05, 0.00031608252902515233, 7.8987613960634917e-05, 4.4577282096724957e-05, 0.00020201117149554193, 0.00012031661026412621, 0.00018628894758876413, 8.9659894001670182e-05, 6.6440865339245647e-05, 9.7390322480350733e-05, 4.5576183765660971e-05, 8.2806436694227159e-05, 7.9097924754023552e-05, 5.2577674068743363e-05, 0.00018725292466115206, 0.00019276348757557571, 5.624299228657037e-05, 0.00016604336269665509, 5.2750154281966388e-05, 4.2300820496166125e-05, 4.9999274779111147e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 23,40,26,-31,71,64,-44,58,-13,112,9,49,-34,43,-17,42,38,91,37,-70,-74,86,-11,53,69,50,40,55,-53,-48,-1,89,-24,12,-84,65,54,-127,-38,23,12,-36,63,-4,-10,-63,-63,-9, 
  /* [1][0][][] */ -50,-1,-84,-43,4,85,-57,21,-15,-38,-41,37,60,-16,-27,-30,-26,-32,-6,16,-65,41,-103,-49,-55,-41,45,68,-22,-25,45,-46,9,-62,-31,49,5,-57,127,-38,-26,28,-49,-14,28,54,35,16, 
  /* [2][0][][] */ -4,6,59,-27,-16,-78,21,29,101,78,-66,15,111,-49,127,76,-67,-20,-25,27,85,-78,-29,-93,12,-35,32,-67,38,45,-44,16,34,-23,61,44,-64,14,7,-31,33,32,68,-12,24,-81,93,-59, 
  /* [3][0][][] */ 48,6,-21,-25,36,112,19,-11,45,-47,22,-23,-50,7,9,48,-45,-76,36,-121,-9,4,-28,-23,-36,93,127,66,-10,-46,25,54,66,-29,90,41,-39,-60,1,43,29,18,-11,1,31,21,-13,-20, 
  /* [4][0][][] */ 101,-6,8,-45,88,84,44,22,71,-13,-104,28,46,-15,16,-18,-98,-127,-37,-90,-14,29,-39,-35,-81,123,-103,120,-59,-53,27,90,43,-39,15,-28,-4,15,-31,30,-49,-15,0,54,-44,108,-29,-52, 
  /* [5][0][][] */ 5,-5,-62,2,-19,61,18,-29,59,58,40,97,56,-28,30,-3,-38,127,-19,40,14,-5,-70,-21,37,-2,-67,-35,-12,34,19,-19,-39,-1,40,11,-46,3,-85,1,94,-17,27,42,-18,11,-40,31, 
  /* [6][0][][] */ 59,16,17,69,7,-27,99,-45,10,70,124,92,42,57,-46,57,34,-52,-82,96,54,-57,-41,54,-82,87,83,-6,112,47,-31,6,96,-58,-127,2,94,32,-4,0,13,55,59,-34,70,127,36,-3, 
  /* [7][0][][] */ -100,-6,-25,29,-69,-67,18,54,79,113,-52,-78,-99,16,-16,-20,-86,105,-5,127,-47,46,23,29,-17,-98,-35,-83,32,44,-3,4,-16,17,15,-12,2,-52,125,11,9,44,24,-21,56,69,-25,1, 
  /* [8][0][][] */ -11,-86,56,-59,70,-49,70,-37,-23,-107,27,13,-36,9,27,30,2,4,-50,106,9,48,-19,34,70,-6,-58,-31,-127,-24,-57,-105,13,-58,1,88,-2,32,110,19,17,0,71,111,0,-66,-47,85, 
  /* [9][0][][] */ 19,-46,17,-64,32,79,-36,52,14,-38,-33,-16,26,-46,127,-20,11,-119,40,41,-67,36,53,-46,-30,-85,-34,79,62,83,-37,-32,-57,24,-3,124,-33,-40,-60,-31,-32,-5,33,105,52,91,-65,9, 
  /* [10][0][][] */ -9,20,-26,-15,25,32,-68,-47,49,39,66,-6,-32,-10,50,-53,-58,127,-3,51,5,-13,15,30,-46,43,3,98,37,9,-33,-13,70,10,-6,25,-10,-45,-38,18,-85,-4,24,-18,18,46,34,32, 
  /* [11][0][][] */ -27,46,-22,35,37,60,2,10,15,19,-127,-72,74,19,-7,-45,0,23,-38,-52,-6,-12,111,4,45,8,-19,38,-6,25,-7,55,26,-1,-43,-2,37,80,108,17,31,-28,65,1,-55,-16,88,1, 
  /* [12][0][][] */ -63,4,36,22,-58,-54,3,7,-33,-31,-127,11,67,-92,16,37,46,94,82,-113,-33,47,-39,-77,3,-14,39,-33,4,10,-21,80,70,84,30,-27,-52,-31,30,4,-29,17,63,-4,41,-19,-40,-31, 
  /* [13][0][][] */ -55,-116,-53,-105,0,19,56,8,-123,25,116,-63,61,42,127,1,108,21,-3,-93,67,-83,105,-16,-82,1,-32,10,-37,-87,-104,9,39,-38,-75,54,24,-53,70,-80,-10,51,63,38,49,-27,105,-70, 
  /* [14][0][][] */ 59,22,-53,11,-40,16,-91,-17,-28,50,60,37,-14,-54,9,-50,47,-109,15,11,90,-54,30,-3,-5,123,-83,5,-58,-34,-86,5,127,45,88,-8,-87,15,-17,60,-14,-44,116,-31,-59,-46,-49,57, 
  /* [15][0][][] */ -61,10,37,16,88,-2,1,29,22,74,-24,55,60,-17,-31,-19,13,37,3,-42,24,-43,-47,-56,44,-67,-42,55,-33,8,13,4,-65,-4,127,-10,-88,16,57,-19,-51,-22,19,-1,-39,-34,-8,2, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0058488822542130947, 0.0059487116523087025, 0.0047846646048128605, 0.0063351639546453953, 0.0040568034164607525, 0.0057520736008882523, 0.0054585449397563934, 0.006365856621414423, 0.0048623494803905487, 0.0038194330409169197, 0.0063240388408303261, 0.0068626971915364265, 0.0052119642496109009, 0.0036143739707767963, 0.00712963892146945, 0.0062799006700515747, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -5467, 11836, -20581, 368, 10866, -14968, -40281, -9286, -7236, 8380, -16301, -13507, 5255, -7819, -4392, -335, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00013762076559942216, 0.00013996969209983945, 0.00011258034646743909, 0.00014906268916092813, 9.5454197435174137e-05, 0.00013534291065298021, 0.00012843635340686888, 0.00014978487160988152, 0.00011440822709118947, 8.9869012299459428e-05, 0.00014880091475788504, 0.00016147522546816617, 0.00012263446114957333, 8.5044091974850744e-05, 0.00016775621043052524, 0.00014776237367186695, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 46,-1,-7,67,-127,-14,120,47,65,91,-23,55,23,10,24,88, 
  /* [1][0][][] */ -33,7,-76,-11,127,98,-21,-2,-44,28,-70,26,-73,81,-73,-49, 
  /* [2][0][][] */ -35,68,84,-3,74,85,11,31,47,-2,37,-12,61,-127,-6,9, 
  /* [3][0][][] */ 127,-41,2,18,14,33,-3,11,45,16,-40,-28,-34,30,-25,40, 
  /* [4][0][][] */ -48,-21,7,14,-127,-9,-83,-40,-1,16,-13,-47,-4,39,-41,112, 
  /* [5][0][][] */ -118,8,41,-5,127,34,19,16,-60,27,-39,11,-49,71,-107,-42, 
  /* [6][0][][] */ -127,16,-42,36,1,-67,79,22,3,-29,-47,37,14,-2,-46,7, 
  /* [7][0][][] */ 23,113,38,-84,62,57,127,-14,73,5,2,29,96,22,-11,-14, 
  /* [8][0][][] */ -28,-32,-65,82,-36,81,-44,-86,36,-32,80,21,127,42,-106,-2, 
  /* [9][0][][] */ -26,-127,-18,93,-39,-52,-11,71,50,44,15,71,-79,22,7,-21, 
  /* [10][0][][] */ -22,-14,-106,63,-93,123,88,-127,6,-34,52,-48,20,122,-67,69, 
  /* [11][0][][] */ -63,-118,-20,41,4,105,47,-3,-21,25,23,-106,7,121,-101,127, 
  /* [12][0][][] */ -12,-122,-108,89,-106,-127,40,65,104,66,-42,109,8,-86,-49,-32, 
  /* [13][0][][] */ -67,-22,-33,-9,-16,7,23,11,-19,127,-12,-24,36,26,13,-9, 
  /* [14][0][][] */ -89,-17,-42,-40,-30,74,-21,-117,127,-56,61,-6,120,-76,-76,-100, 
  /* [15][0][][] */ 3,-127,92,-57,-53,-37,5,61,18,-47,-90,-36,84,-40,-34,-50, 
  /* [16][0][][] */ -15,-27,23,-28,34,31,-10,-21,66,-127,38,-15,3,-5,-69,-95, 
  /* [17][0][][] */ -14,5,23,-81,11,-6,-40,20,79,-68,28,99,127,-81,-3,-119, 
  /* [18][0][][] */ 59,14,-48,-124,-4,-16,127,-48,17,44,6,59,-13,83,-8,-106, 
  /* [19][0][][] */ -49,-28,-25,-105,-125,56,-2,-15,26,-50,22,-127,-6,-4,-31,8, 
  /* [20][0][][] */ 13,78,76,-108,62,5,-65,85,-101,-127,31,-97,-43,98,-29,-19, 
  /* [21][0][][] */ 28,-127,-108,-16,103,41,69,95,-93,-86,-31,33,119,-123,-17,19, 
  /* [22][0][][] */ 65,-11,71,-16,-1,15,70,23,40,115,32,29,10,2,127,-12, 
  /* [23][0][][] */ -127,-68,-3,51,67,52,19,7,-17,20,-6,-95,-12,55,49,111, 
  /* [24][0][][] */ 11,0,23,27,21,-82,31,-76,46,118,-127,56,-8,-89,93,-69, 
  /* [25][0][][] */ 121,-70,107,108,39,4,-25,26,-127,80,55,-75,-18,21,99,-5, 
  /* [26][0][][] */ -18,25,12,44,-56,109,-18,35,-53,-35,-74,33,2,16,48,-127, 
  /* [27][0][][] */ 32,0,-5,-55,-54,8,-90,8,-104,-22,-75,-51,-72,42,-27,127, 
  /* [28][0][][] */ -69,15,10,-4,24,-8,-127,5,-1,-34,6,-11,12,-54,-69,-27, 
  /* [29][0][][] */ -35,-115,-19,89,-28,8,127,3,65,63,-117,55,19,-26,-53,81, 
  /* [30][0][][] */ 39,-40,-56,-3,-127,17,52,-26,10,-15,0,-18,-9,44,2,85, 
  /* [31][0][][] */ -127,-16,10,87,-33,-5,-42,7,-34,-51,3,-16,-16,-34,-15,81, 
  /* [32][0][][] */ -122,-100,-89,5,-88,-57,-7,-7,127,56,-55,-52,41,38,45,-28, 
  /* [33][0][][] */ -10,6,-91,66,-127,-98,47,-10,-122,17,-56,-70,-25,103,71,73, 
  /* [34][0][][] */ 40,52,7,35,-62,-45,44,11,28,-127,-24,52,-18,1,30,82, 
  /* [35][0][][] */ 41,-14,-51,-9,-127,4,92,-30,10,54,-9,-10,32,68,23,48, 
  /* [36][0][][] */ 6,-15,-47,69,127,-22,32,66,-75,21,-81,-81,28,-34,8,11, 
  /* [37][0][][] */ -102,38,2,-53,39,-96,-47,-21,0,-33,-9,52,60,-85,28,-127, 
  /* [38][0][][] */ 50,86,22,-47,-97,-60,-127,-38,-22,-76,52,79,-57,-97,72,-5, 
  /* [39][0][][] */ 5,-53,3,69,29,83,75,-45,-21,55,19,-21,-13,127,34,108, 
  /* [40][0][][] */ 113,43,112,94,-68,-80,-15,36,-89,69,-29,-27,-26,-31,127,-8, 
  /* [41][0][][] */ -14,-17,10,54,-79,117,7,45,-48,30,-102,11,26,25,46,-127, 
  /* [42][0][][] */ 16,-99,41,-10,127,20,77,11,-39,-94,-88,-22,-7,-5,-23,34, 
  /* [43][0][][] */ -50,-85,-45,6,127,10,1,84,-77,-47,-112,-92,94,0,-65,64, 
  /* [44][0][][] */ -38,-40,-102,-116,35,102,77,18,-49,-127,-68,85,-54,57,34,101, 
  /* [45][0][][] */ 7,-80,-104,-7,-127,86,-29,-77,101,-71,23,-53,24,-1,-37,54, 
  /* [46][0][][] */ 41,-79,-23,4,77,-64,6,68,6,-32,34,47,-36,-63,48,-127, 
  /* [47][0][][] */ -99,-24,-23,76,-38,28,49,32,3,127,105,84,-67,74,-14,93, 
  /* [48][0][][] */ 42,-10,-90,-99,33,-72,11,51,43,-72,2,16,-70,0,-34,-127, 
  /* [49][0][][] */ 45,39,11,16,-8,-23,55,57,-42,127,-36,33,-25,-16,68,95, 
  /* [50][0][][] */ 2,-3,15,2,-127,-16,-18,-55,63,29,17,59,-30,-63,7,-10, 
  /* [51][0][][] */ 12,-3,-8,-127,-28,89,47,-47,0,-3,27,-40,57,57,-13,17, 
  /* [52][0][][] */ 18,-12,3,-91,89,-105,5,-46,37,8,127,-56,37,18,-40,91, 
  /* [53][0][][] */ -63,-53,34,-36,-51,-127,30,-119,-11,97,-91,87,-40,-8,12,-75, 
  /* [54][0][][] */ 69,60,41,-5,-127,-42,-93,-109,1,1,38,67,-68,-48,62,4, 
  /* [55][0][][] */ 19,4,-30,88,-34,22,38,-19,13,127,23,66,6,-2,12,49, 
  /* [56][0][][] */ 32,-127,-89,78,-81,47,-4,69,117,5,66,38,-44,-19,30,93, 
  /* [57][0][][] */ 65,29,113,-119,61,11,0,-14,72,-63,34,127,92,-80,124,-45, 
  /* [58][0][][] */ 72,-66,18,-91,37,20,-11,127,41,113,-10,67,49,18,92,3, 
  /* [59][0][][] */ -51,31,43,-39,8,-91,-25,35,10,13,-121,-96,-127,-53,80,-9, 
  /* [60][0][][] */ 52,-31,29,26,6,-26,15,-53,34,127,-12,62,3,-40,-1,-39, 
  /* [61][0][][] */ 67,81,-5,-34,-101,-127,-21,-76,-71,-3,-29,15,-47,-52,64,81, 
  /* [62][0][][] */ -32,100,-41,40,-48,127,-31,13,-55,6,-47,30,-32,54,64,-85, 
  /* [63][0][][] */ 23,0,-52,-127,-15,-43,77,-18,-7,-91,-39,24,-38,71,22,-23, 
  /* [64][0][][] */ -37,21,9,-26,47,-71,13,96,-127,-23,-72,-41,-40,78,64,66, 
  /* [65][0][][] */ -82,-25,-32,1,96,43,-62,-68,-122,-53,3,-25,-127,123,-65,49, 
  /* [66][0][][] */ -17,51,-3,33,-36,127,-25,22,-57,18,-36,37,-25,44,40,-93, 
  /* [67][0][][] */ 25,-37,-32,-19,21,-91,53,-92,-1,32,-2,108,-62,-40,-19,-127, 
  /* [68][0][][] */ 6,-127,-8,87,10,7,39,84,43,47,45,10,-68,44,-3,-9, 
  /* [69][0][][] */ 17,72,88,-95,45,5,-37,104,49,69,63,82,104,-120,37,-127, 
  /* [70][0][][] */ 39,31,54,-33,94,7,-84,-45,-127,-83,-11,51,-16,69,-83,3, 
  /* [71][0][][] */ -3,-101,41,-28,72,-19,19,53,-71,74,-127,-51,31,57,-8,30, 
  /* [72][0][][] */ 2,12,47,0,-59,-19,-114,-58,-15,52,-23,44,21,110,-127,1, 
  /* [73][0][][] */ -11,-45,-14,-53,46,-127,29,-47,68,104,112,-4,11,-16,-91,127, 
  /* [74][0][][] */ 6,13,-15,74,-75,-14,90,18,55,75,25,127,106,31,-46,13, 
  /* [75][0][][] */ -29,43,-32,33,-52,127,-15,24,-35,31,-33,51,-19,53,21,-75, 
  /* [76][0][][] */ -67,89,-55,40,-115,-1,-3,25,52,33,-58,-42,67,-52,-127,27, 
  /* [77][0][][] */ 127,107,-122,120,69,74,80,48,57,12,101,-37,86,25,87,7, 
  /* [78][0][][] */ 19,-41,7,-73,76,-125,30,-56,60,54,127,-26,10,-28,-47,117, 
  /* [79][0][][] */ -39,60,3,25,-5,-43,-35,4,-127,-15,51,12,112,41,-70,-39, 
  /* [80][0][][] */ -100,27,69,-12,83,63,-9,-127,-78,82,-57,-47,-28,-103,28,64, 
  /* [81][0][][] */ 71,70,-14,-9,37,-20,71,107,-117,127,-61,-36,-53,43,94,121, 
  /* [82][0][][] */ 58,100,-28,-66,8,-41,102,-91,36,20,-77,78,127,-18,63,-55, 
  /* [83][0][][] */ 13,-40,25,41,11,20,-23,-101,63,-30,95,12,34,-64,-39,-127, 
  /* [84][0][][] */ -127,-77,-41,-15,-11,79,87,7,73,70,103,86,35,81,-76,9, 
  /* [85][0][][] */ 127,5,97,-86,98,-1,-3,112,18,116,-69,20,-48,109,121,13, 
  /* [86][0][][] */ -89,81,-41,-8,27,90,15,14,92,43,127,-32,-35,61,-10,-18, 
  /* [87][0][][] */ 14,-62,23,-41,50,-127,32,-31,50,-12,64,-33,38,-44,-37,67, 
  /* [88][0][][] */ -89,52,47,-4,121,-28,32,27,-65,-56,113,-61,59,124,95,-127, 
  /* [89][0][][] */ -27,38,-7,24,-27,127,-18,30,-42,14,-40,15,-7,57,21,-77, 
  /* [90][0][][] */ 58,-80,31,19,125,3,46,21,1,-92,-127,-25,3,-18,-35,24, 
  /* [91][0][][] */ -30,67,-20,-29,9,-51,-89,53,-99,51,-119,-111,-127,-63,-9,11, 
  /* [92][0][][] */ 80,48,77,41,-127,-104,27,2,-27,40,-32,-39,-17,-87,30,4, 
  /* [93][0][][] */ -5,-126,-114,54,-46,-51,-19,127,90,62,16,78,-53,59,-6,-16, 
  /* [94][0][][] */ 102,10,119,-26,22,-48,11,46,21,85,-3,43,8,1,127,-14, 
  /* [95][0][][] */ -61,-31,-26,-3,127,-4,49,80,-22,-9,-86,-48,18,24,-54,28, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0047711511142551899, 0.001894251094199717, 0.0061265346594154835, 0.0050041028298437595, 0.0035620180424302816, 0.00097926333546638489, 0.0046489392407238483, 0.0026227068156003952, 0.0018007435137405992, 0.0029166466556489468, 0.0011306873057037592, 0.0023594170343130827, 0.0026196080725640059, 0.0060287457890808582, 0.0018740749219432473, 0.002532164566218853, 0.0032299007289111614, 0.0024724456015974283, 0.0030055604875087738, 0.00097480200929567218, 0.0042420919053256512, 0.0018328642472624779, 0.0034739701077342033, 0.0029301093891263008, 0.0015096500283107162, 0.0025427646469324827, 0.0040529337711632252, 0.0039739878848195076, 0.0025482182390987873, 0.0035444390960037708, 0.0031873888801783323, 0.0027272261213511229, 0.0044267824850976467, 0.0016299985582008958, 0.0029819789342582226, 0.0038151608314365149, 0.003025151090696454, 0.0046644546091556549, 0.0023049607407301664, 0.0032100437674671412, 0.00078129407484084368, 0.0035104379057884216, 0.0033916626125574112, 0.0026325720828026533, 0.002057584235444665, 0.0010331138037145138, 0.0024010147899389267, 0.0014905135612934828, 0.0045495191588997841, 0.0035033836029469967, 0.0040009468793869019, 0.0022949399426579475, 0.0036116791889071465, 0.0022816425189375877, 0.0019192191539332271, 0.0057571916840970516, 0.0023608424235135317, 0.00122986757196486, 0.0027484002057462931, 0.0039657088927924633, 0.0028674739878624678, 0.0013960383366793394, 0.0030093127861618996, 0.0042718858458101749, 0.00062995532061904669, 0.001216972479596734, 0.004588655661791563, 0.0031995419412851334, 0.0021777048241347075, 0.0027438919059932232, 0.0035059223882853985, 0.0021840522531419992, 0.0030028906185179949, 0.0026294135022908449, 0.004117271862924099, 0.0039512659423053265, 0.0038755862042307854, 0.0016339343274012208, 0.0030218351166695356, 0.0029714154079556465, 0.0025993471499532461, 0.002454172121360898, 0.0019998559728264809, 0.001168344053439796, 0.0029876541811972857, 0.0013532985467463732, 0.0017643390456214547, 0.0044328044168651104, 0.0040561407804489136, 0.0045127826742827892, 0.0028850957751274109, 0.0016231657937169075, 0.0029153241775929928, 0.002337936544790864, 0.0019856365397572517, 0.002475739223882556, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 1001, 6910, 253, 1385, 3306, 16030, -15, 2345, 8262, -1162, 13309, 3447, 2305, 593, 4859, 499, 3084, 4595, -234, 16468, 1042, 7686, -1544, 1567, -8831, 1415, 1887, 1447, 5996, 1498, 3202, 3684, 1395, 8973, 3134, 2687, 3396, 1431, 3466, 2246, 22277, 1343, 1595, 1391, 3480, 15365, 5182, 9071, 870, -950, 1887, 5563, 2290, -3715, 6746, 99, 2609, 12811, 1266, 1252, 2592, 11326, 3689, -188, 29405, 12585, 1582, 3034, 6289, 3182, 2329, 1609, -3187, 4346, 1681, 2711, 272, 8999, 3380, 4944, 2900, 909, 4238, 13661, 7, 8985, 7157, 1580, -675, 2127, 1290, 9742, 2983, 3490, 5144, 4521, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00027265786775387824, 0.00010825112258316949, 0.00035011422005482018, 0.00028597039636224508, 0.00020355930610094219, 5.5962143960641697e-05, 0.00026567379245534539, 0.00014988031762186438, 0.00010290742648066953, 0.00016667814634274691, 6.461559678427875e-05, 0.00013483404472935945, 0.00014970323536545038, 0.00034452584804967046, 0.00010709810885600746, 0.00014470607857219875, 0.00018457973783370107, 0.00014129330520518124, 0.00017175932589452714, 5.5707190767861903e-05, 0.00024242361541837454, 0.00010474303417140618, 0.00019852761761285365, 0.00016744750610087067, 8.6272251792252064e-05, 0.0001453118456993252, 0.00023161375429481268, 0.0002271022240165621, 0.00014562350406777114, 0.00020255471463315189, 0.00018215031013824046, 0.00015585329674649984, 0.00025297814863733947, 9.3149828899186105e-05, 0.00017041170212905854, 0.00021802569972351193, 0.00017287887749262154, 0.00026656046975404024, 0.0001317220157943666, 0.0001834449649322778, 4.4648757466347888e-05, 0.00020061165560036898, 0.00019382397294975817, 0.00015044408792164177, 0.00011758515029214323, 5.9039546613348648e-05, 0.00013721124560106546, 8.5178653534967452e-05, 0.00025999222998507321, 0.0002002085093408823, 0.00022864284983370453, 0.00013114935427438468, 0.00020639730792026967, 0.00013038945326115936, 0.00010967797425109893, 0.00032900730730034411, 0.00013491550635080785, 7.0283473178278655e-05, 0.00015706333215348423, 0.00022662909759674221, 0.00016386806964874268, 7.9779660154599696e-05, 0.00017197376291733235, 0.0002441262622596696, 3.6000172258354723e-05, 6.9546549639198929e-05, 0.00026222877204418182, 0.00018284481484442949, 0.00012444969615899026, 0.00015680570504628122, 0.00020035360648762435, 0.00012481244630180299, 0.00017160674906335771, 0.0001502635859651491, 0.00023529049940407276, 0.00022580372751690447, 0.00022147884010337293, 9.3374750576913357e-05, 0.00017268936790060252, 0.00016980803047772497, 0.00014854536857455969, 0.00014024903066456318, 0.00011428614379838109, 6.6767577663995326e-05, 0.00017073603521566838, 7.7337201219052076e-05, 0.00010082701192004606, 0.00025332230143249035, 0.00023179703566711396, 0.00025789282517507672, 0.00016487510583829135, 9.2759357357863337e-05, 0.000166602578246966, 0.00013360648881644011, 0.00011347354302415624, 0.00014148153422866017, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -47,-3,10,-44,92,-7,22,-10,-9,-11,-7,-31,-37,7,3,-19,-13,3,-13,-19,8,36,36,40,-1,-34,-19,6,30,2,25,3,-5,5,-14,-25,-12,-102,-30,30,-7,4,39,-37,-35,37,-76,-7,-9,18,-4,50,-89,31,37,-8,0,-16,10,-18,-4,-22,-16,-72,-45,-18,-50,-31,-4,30,-22,9,18,-3,-7,-2,-39,28,127,-39,-127,12,-114,-16,-41,-6,7,-1,-30,-19,6,-40,-2,27,-37,6, 4,37,74,-98,-41,-1,110,-56,-6,-21,-32,14,-27,-4,-82,68,-6,65,90,-33,-4,127,124,113,30,6,48,62,127,28,127,-32,-127,-15,-102,-32,-28,-127,127,-32,-34,-119,-6,-57,51,-43,-42,8,64,15,23,127,-116,77,-91,-5,-88,-11,-2,24,-8,-127,-127,-84,-55,4,-13,-97,-3,20,-82,111,-127,-19,-5,-29,-127,-58,-11,-85,-118,9,15,-67,75,85,-80,22,-127,-4,46,-13,12,111,-55,-91, -24,6,12,-19,58,-4,36,-24,-23,5,-6,-9,-17,9,1,-29,-9,-5,-20,-28,7,18,50,26,-2,-14,-1,-9,16,10,15,7,-7,4,-12,48,-12,-81,-19,27,-10,3,34,-24,-23,-37,-54,-11,-1,2,-2,32,-4,11,5,-9,55,-23,12,-25,-3,-12,-60,-26,-39,-30,127,-30,3,21,-28,16,26,10,1,16,-31,63,-46,-27,-105,8,-127,-14,2,-18,2,-18,-39,-36,-5,44,8,28,-42,9, 
  /* [0][1][][] */ -94,-6,48,-54,39,101,-42,-14,-8,-13,-19,-15,-127,28,26,53,-13,33,125,15,42,-11,127,-30,40,32,77,25,-4,17,-7,-22,-123,-13,84,-8,-18,-111,-47,-127,-22,1,114,-37,-75,127,-111,-60,75,58,24,-49,-122,73,67,-30,17,-33,37,-17,13,-14,78,-95,-45,15,-36,-56,-4,-4,-127,15,63,127,18,-72,-104,-73,-70,-60,-88,-3,-36,-41,36,31,-108,66,-73,127,93,-93,127,-2,-59,2, 82,127,127,127,-127,-127,127,-60,127,127,-71,-44,-66,127,-23,127,127,-127,127,127,127,-76,113,-127,-127,-127,127,127,-111,127,-24,127,-67,127,127,-85,127,104,15,-6,127,12,-127,-127,127,-29,127,127,127,-127,127,-126,118,127,-127,127,-127,127,-127,127,-105,109,103,-127,127,127,-18,127,-101,-127,0,-127,5,118,127,73,42,-127,95,-127,0,127,115,127,127,70,-127,127,-87,52,12,-21,-96,-30,-127,-26, -127,-37,54,-73,8,59,-54,5,-40,-12,-1,127,-105,27,29,49,-20,42,90,0,30,-16,88,-29,41,30,45,16,-8,4,9,-21,-83,-29,114,127,-13,-103,-57,-78,-31,-20,48,-43,-65,-74,-118,-86,67,56,6,-34,127,0,102,-48,83,-32,51,-45,1,-35,-117,-39,-73,-11,-62,-64,-12,3,-106,2,42,-101,14,127,-88,-52,-66,-17,-92,0,-82,-63,-2,35,-88,44,-39,-72,127,127,-45,-26,-52,3, 
  /* [0][2][][] */ -14,-47,-19,-1,31,2,-10,24,-17,0,37,-28,47,9,1,-29,1,-11,-25,-30,-4,-12,32,-28,5,6,-4,26,-6,9,-21,-2,20,1,-3,-20,-12,-9,-8,-2,-33,-16,36,1,9,4,-61,5,-10,-5,-10,-18,-25,-40,22,-18,1,-22,5,-24,0,12,9,-18,-39,-21,126,36,34,28,-37,-12,-3,-15,-1,-24,-14,-14,-39,-26,-4,10,-80,-11,8,1,32,-1,-29,1,-15,-27,-17,-25,-30,0, -21,-68,28,-106,-36,3,58,127,-63,55,127,-33,-40,29,127,79,-6,-36,110,-57,-9,-33,102,7,17,-10,44,39,-19,12,-76,-51,-25,-28,-101,3,-97,-87,52,-63,-29,-127,-28,119,19,-29,-57,4,48,-15,-4,-5,52,31,-54,-47,-58,-54,43,-55,127,24,98,-3,-87,-50,-27,-52,127,33,-81,7,29,-29,31,-21,-26,-92,-3,39,-96,-9,-97,-68,51,-127,-12,29,-52,4,46,0,14,-127,-49,127, -12,-1,-17,4,25,-6,-4,18,-27,-3,17,45,53,12,1,-35,-1,6,9,-36,0,1,26,-16,-1,12,-15,14,-9,9,-30,-5,20,5,-7,-1,-14,-39,-13,10,-35,-2,14,-1,7,-12,-75,7,-7,-16,-2,-18,2,-50,30,-12,43,-13,10,-24,4,12,-16,7,-32,-26,-37,39,32,15,-33,-13,-23,-43,-1,-10,-16,-17,97,-19,1,8,-57,-4,-5,5,40,17,-22,4,-16,12,-1,-29,-10,-9, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0047069503925740719, 0.014970823191106319, 0.0059913978911936283, 0.0057983715087175369, 0.011126194149255753, 0.029220284894108772, 0.0035720099695026875, 0.011187744326889515, 0.015632573515176773, 0.013383815065026283, 0.015413263812661171, 0.0094725918024778366, 0.0055272742174565792, 0.0060109207406640053, 0.01137732807546854, 0.0078843608498573303, 0.013515423983335495, 0.016875181347131729, 0.0038875974714756012, 0.020524810999631882, 0.0079118693247437477, 0.014220126904547215, 0.0039814184419810772, 0.010744978673756123, 0.091581873595714569, 0.0075959856621921062, 0.0090841241180896759, 0.0053454190492630005, 0.015403271652758121, 0.006360938772559166, 0.0096192751079797745, 0.01707884855568409, 0.0034575287718325853, 0.019924836233258247, 0.0059092864394187927, 0.012323535978794098, 0.013616298325359821, 0.0038072890602052212, 0.014500577934086323, 0.0055391187779605389, 0.030167629942297935, 0.0078625064343214035, 0.009518451988697052, 0.0054475665092468262, 0.007777008693665266, 0.019148612394928932, 0.0052478951402008533, 0.017600527033209801, 0.0051303058862686157, 0.019972080364823341, 0.011687389574944973, 0.0094075892120599747, 0.0063714999705553055, 0.012439555488526821, 0.014313565567135811, 0.012358025647699833, 0.0087999282404780388, 0.021074028685688972, 0.018247596919536591, 0.012765815481543541, 0.013934275135397911, 0.014848927967250347, 0.0078953905031085014, 0.0044025499373674393, 0.012797989882528782, 0.023197708651423454, 0.0056038484908640385, 0.0066408547572791576, 0.01288179773837328, 0.01462041400372982, 0.0036688093096017838, 0.013127973303198814, 0.025019349530339241, 0.0088052824139595032, 0.006710683461278677, 0.010046504437923431, 0.0038046897388994694, 0.0060443775728344917, 0.0058823889121413231, 0.0063408617861568928, 0.0025212187319993973, 0.0095945922657847404, 0.0035516559146344662, 0.017066206783056259, 0.0041165645234286785, 0.013376332819461823, 0.0052533266134560108, 0.0093181738629937172, 0.0037973183207213879, 0.011050340719521046, 0.0038144502323120832, 0.012907514348626137, 0.018895210698246956, 0.0085117379203438759, 0.0032404630910605192, 0.014793721958994865, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 8768, 256, -6975, 9159, -492, -372, 1783, -862, 3926, -2932, -1165, -2257, 8691, -3920, -3001, -5677, -596, 969, -13233, 1925, -4010, -1291, -7876, 970, 7, 6242, -10118, -6826, -1080, -3977, -323, 283, 14978, -472, -1837, -1088, 2186, 12816, 7, 7466, 2420, 5761, -2479, 7721, 1723, 1939, 14369, -417, -8281, 121, -4391, 666, 1354, -3138, -397, 2336, 1715, 3896, -303, 2193, -758, 2191, 993, 10402, 13464, -273, 12406, 8676, -2984, -1172, 12898, -1012, -90, 1036, -3865, -293, 16601, 12168, 9777, 14017, 14972, -2260, 11275, 7113, -306, -2606, 12096, -7570, 12495, -213, -8987, -229, -195, 2431, 21430, -1673, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00011035227362299338, 0.00035098401713185012, 0.00014046554861124605, 0.00013594013580586761, 0.00026084846467711031, 0.00068505603121593595, 8.3744118455797434e-05, 0.00026229149079881608, 0.00036649845424108207, 0.00031377736013382673, 0.00036135682603344321, 0.00022208053269423544, 0.00012958438310306519, 0.00014092325000092387, 0.000266736198682338, 0.00018484519387129694, 0.00031686286092735827, 0.00039563080645166337, 9.1142923338338733e-05, 0.000481194700114429, 0.00018549012020230293, 0.0003333842905703932, 9.334251080872491e-05, 0.00025191105669364333, 0.0021470945794135332, 0.0001780843740561977, 0.00021297308558132499, 0.0001253208756679669, 0.00036112256930209696, 0.00014912926417309791, 0.00022551945585291833, 0.00040040569729171693, 8.1060163211077452e-05, 0.00046712855692021549, 0.00013854049029760063, 0.00028891960391774774, 0.00031922780908644199, 8.9260131062474102e-05, 0.00033995934063568711, 0.00012986207730136812, 0.00070726609556004405, 0.00018433282093610615, 0.00022315570095088333, 0.00012771566980518401, 0.00018232836737297475, 0.0004489303391892463, 0.0001230344787472859, 0.00041263620369136333, 0.00012027764751110226, 0.00046823619049973786, 0.00027400543331168592, 0.0002205565688200295, 0.00014937686501070857, 0.00029163961880840361, 0.00033557490678504109, 0.00028972819563932717, 0.00020631024381145835, 0.00049407087499275804, 0.00042780645890161395, 0.00029928862932138145, 0.0003266826388426125, 0.00034812625381164253, 0.00018510378140490502, 0.00010321574518457055, 0.00030004294239915907, 0.00054385955445468426, 0.00013137963833287358, 0.00015569177048746496, 0.00030200777109712362, 0.00034276884980499744, 8.6013533291406929e-05, 0.00030777926440350711, 0.00058656703913584352, 0.00020643576863221824, 0.00015732886095065624, 0.00023553564096800983, 8.9199187641497701e-05, 0.0001417076273355633, 0.00013790988305117935, 0.00014865856792312115, 5.910880645387806e-05, 0.00022494076984003186, 8.3266932051628828e-05, 0.00040010930388234556, 9.6510950243100524e-05, 0.00031360192224383354, 0.00012316180800553411, 0.00021846027811989188, 8.9026369096245617e-05, 0.00025907013332471251, 8.942801650846377e-05, 0.00030261068604886532, 0.00044298946158960462, 0.00019955376046709716, 7.5971154728904366e-05, 0.00034683197736740112, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 18,33,14,11,-23,-71,-18,1,-19,-77,24,-9,41,-65,56,30,-72,-37,37,16,72,4,-70,21,-8,68,127,61,5,62,42,-36,2,-2,1,-25,26,38,-15,-2,114,16,23,-3,-11,-8,-3,-45,35,-37,95,0,-62,6,20,19,-4,-32,2,29,-6,36,-51,-14,19,9,55,17,5,-31,31,13,12,34,4,28,68,-28,36,27,-6,40,38,25,-59,9,-9,62,17,6,-81,-27,19,4,97,66, 
  /* [1][0][][] */ 28,45,-52,-11,6,-43,97,-72,-76,-42,-65,-45,2,-40,-13,-58,-30,-29,-36,-22,-9,-86,108,-26,-7,21,-4,67,-44,3,-45,21,-37,29,15,10,-17,44,-60,80,24,14,2,-52,58,-53,-2,26,-89,2,46,-111,-43,42,70,49,35,24,-74,8,-51,2,-9,-20,27,13,100,10,-48,-127,2,25,21,67,-30,38,-60,-24,99,-35,35,-11,50,-57,-29,-63,-21,4,-24,-45,27,8,72,-51,-28,44, 
  /* [2][0][][] */ 5,-16,21,-14,60,48,-55,44,-49,44,21,-15,33,-2,17,30,26,-24,-127,0,-15,-48,-16,18,2,-17,-40,17,-40,-16,-21,78,-12,-32,-2,15,-44,38,-22,-23,79,12,15,49,10,62,8,-6,-91,13,-21,12,-22,53,11,-59,41,29,46,40,-16,-12,-18,57,44,2,-33,-6,-4,-9,-18,-40,33,51,32,74,-48,-11,-25,-33,38,39,59,-14,-8,-44,-15,-48,-22,-35,-10,74,4,-9,83,-26, 
  /* [3][0][][] */ 25,-33,-17,-127,-10,-36,102,-23,27,114,-66,-4,-3,-27,-19,70,52,45,-24,34,-55,6,18,2,-40,71,58,-13,-35,-5,-72,59,2,-9,34,-28,2,-37,-32,64,15,5,-10,36,56,-42,-16,37,57,-32,37,-31,102,50,18,-3,7,-13,-4,-33,-27,42,74,-2,-22,-13,119,-43,-24,-27,-39,19,10,-69,15,-72,34,-52,121,3,0,-43,-24,-50,-37,-37,81,84,-46,42,-46,-2,10,-89,-27,33, 
  /* [4][0][][] */ -30,72,38,10,-18,3,-39,-12,11,-42,13,-6,19,42,-28,20,-13,-45,-11,-60,24,-51,-70,21,-33,-25,-16,13,-30,127,-64,-13,3,-34,3,-32,60,54,-45,3,21,6,15,-29,-50,5,53,-17,29,-20,-59,-3,-59,40,40,9,12,68,-33,28,-31,-66,-19,-3,58,26,-62,-15,10,-18,14,-71,-22,52,51,60,-23,16,-60,48,18,64,37,-65,43,-72,-26,-63,-45,-45,-48,-7,2,-3,35,-23, 
  /* [5][0][][] */ -9,-11,36,-25,-17,-27,-18,2,36,10,-13,1,-23,-32,25,-17,-17,12,-54,-28,-25,23,-17,7,25,-47,71,-22,-3,42,12,77,-6,-78,25,10,-39,-27,-30,3,-48,-6,-19,15,5,23,-83,29,-15,13,53,-4,26,-73,2,19,-21,-58,15,-30,44,28,31,47,-36,19,112,-28,2,-15,17,25,-4,30,41,16,0,-17,127,44,-19,-3,-29,24,38,72,7,96,3,-38,-5,4,9,-15,-36,19, 
  /* [6][0][][] */ 9,-59,66,6,-43,112,-63,-82,-18,-74,-74,75,2,14,-26,92,8,31,12,-19,-81,-28,-87,-62,8,-56,-12,68,-126,51,-19,-30,48,82,-20,4,-10,-22,26,-19,-52,35,45,-31,10,57,-100,-12,52,24,-86,-127,84,14,-49,-18,35,-28,28,-1,-3,-53,43,6,56,-61,-63,-61,-92,9,-16,-71,-20,-93,20,-102,93,14,-72,44,-25,86,29,-90,59,-36,-12,4,-79,74,-73,87,42,-44,62,-92, 
  /* [7][0][][] */ -3,-18,-63,55,-47,3,39,1,-96,5,103,68,-16,-64,3,-33,-16,2,3,15,-60,-42,-47,-54,80,52,-1,74,10,38,20,37,-62,-127,32,113,-16,29,-51,11,5,-16,13,-75,35,70,64,100,-5,48,-49,16,35,-40,39,-57,-15,58,-91,-6,73,17,15,-36,89,-44,117,-24,-57,-51,86,-1,-22,-39,-83,-32,45,-43,103,-29,6,-9,-67,-40,50,20,-78,51,-14,23,12,36,71,-12,92,-1, 
  /* [8][0][][] */ -3,-65,2,6,-18,-8,29,-18,-8,-6,32,35,20,23,-50,-9,68,4,15,3,-21,-65,-37,-27,-28,-33,75,-2,-12,45,13,-29,-17,1,1,0,-48,-19,2,-26,-8,46,21,-38,19,-20,18,-7,39,-1,48,16,1,8,-37,2,-20,105,-54,-11,-20,-55,-54,-10,-87,-38,-22,16,6,19,44,-20,-40,-127,41,-110,10,7,-60,21,-32,-6,5,55,67,-69,-43,59,-38,94,9,-26,-56,-3,-2,-61, 
  /* [9][0][][] */ -31,-27,-32,27,12,27,9,52,-43,-1,61,70,-22,63,18,-54,-16,36,-23,-48,8,52,-5,11,-27,29,1,22,33,-11,26,-1,-18,-23,4,61,-21,-8,32,-7,-17,-24,18,-3,12,47,10,38,-56,18,-21,29,124,14,-14,-6,17,-21,33,16,-27,-2,74,6,7,17,65,13,29,-2,-29,35,14,-127,-44,-118,-39,-8,40,-8,-9,33,-4,-37,46,12,-62,-10,-7,115,35,35,55,46,-10,28, 
  /* [10][0][][] */ 19,41,10,2,-13,18,-36,-19,61,6,-46,14,23,13,-14,-57,-31,-2,17,-8,27,-4,-19,-27,11,-17,-98,45,-20,49,4,13,18,20,-22,6,17,-5,7,-4,35,-7,51,-48,-32,-8,23,23,12,8,6,-28,-23,-18,0,30,-13,0,-12,-11,-12,-43,-12,8,-8,-21,-91,-25,-58,-11,39,-10,-16,35,31,17,45,-15,-92,7,-15,29,-7,-1,4,5,-71,-127,-25,25,8,18,46,-25,20,29, 
  /* [11][0][][] */ 12,-38,-3,12,-54,27,19,9,77,-15,-28,-42,28,15,7,-15,-27,51,20,-75,11,41,14,-25,35,15,57,6,24,-64,-19,22,16,99,-104,9,19,-15,70,5,-57,53,-20,10,-42,2,-5,-6,43,-15,-28,-15,-20,11,-72,91,-27,-9,3,-38,19,-3,-10,-71,-13,-40,-127,-74,-11,-22,-98,26,59,22,-13,2,29,60,-111,-41,-17,-6,-23,2,-19,-10,53,75,19,-46,2,7,-34,32,85,37, 
  /* [12][0][][] */ 10,37,-32,-32,10,-28,-5,42,57,-38,28,7,-6,-19,-1,15,8,-42,-28,25,8,57,2,57,-36,-39,-127,-14,73,-23,29,-4,-16,-74,72,-6,29,-5,-4,21,1,-61,21,39,42,0,18,-15,-66,-3,-48,97,77,-16,27,-75,16,26,-35,-20,25,55,84,6,-9,-4,33,23,116,22,31,28,7,-16,-7,-2,-29,-59,44,-65,29,-45,35,-42,-3,13,7,-103,-7,33,-36,18,20,66,8,45, 
  /* [13][0][][] */ -19,18,-69,23,27,17,-14,14,29,65,-38,49,-46,-18,59,-47,14,49,59,9,-29,-50,-3,19,46,46,-22,21,2,40,67,-17,-7,58,-11,46,15,-41,-37,-50,-3,-15,24,14,40,46,-28,46,-50,43,-6,-8,-22,-44,56,36,17,-49,-11,-9,37,9,-9,-23,11,85,127,40,13,-1,-54,-18,47,55,-77,60,20,-68,123,-42,-10,-36,17,5,22,55,-36,-23,-9,-26,12,44,43,11,57,56, 
  /* [14][0][][] */ -7,58,23,10,-63,-47,12,42,-60,-25,79,16,-85,-10,64,-17,-40,28,-57,36,-26,10,-95,19,-47,1,-45,-114,4,-1,21,75,-56,22,6,-14,-26,-57,-13,-36,34,-38,55,-18,-13,47,-79,26,-4,-42,75,22,-4,36,-39,26,-45,37,2,50,41,59,0,43,20,-36,-1,-71,39,51,83,27,-41,32,19,14,44,-12,30,24,-60,112,6,-127,81,3,-6,5,-104,-14,-13,-4,-21,6,33,31, 
  /* [15][0][][] */ 69,-37,25,42,47,8,-6,-22,18,40,-65,-24,73,67,-10,-16,-8,4,-78,45,5,-17,28,31,69,-41,86,34,45,-28,-32,61,71,52,0,-81,68,65,72,53,88,42,-28,-1,-46,-126,48,-39,-43,-25,-16,-4,-15,-59,-16,49,-23,6,-16,6,-5,-52,-46,38,34,37,-76,47,-14,-33,-11,-11,-2,-127,-47,-108,-32,22,-122,30,77,-41,44,36,-54,-6,-2,-25,43,87,10,-62,-31,-29,33,-45, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0039402437396347523, 0.0023935702629387379, 0.0024097543209791183, 0.0024324778933078051, 0.0037648314610123634, 0.0052961558103561401, 0.0025272455532103777, 0.0022622169926762581, 0.0042981607839465141, 0.0040582828223705292, 0.0041336808353662491, 0.0032923684921115637, 0.0037126285023987293, 0.0039536524564027786, 0.0033158583100885153, 0.0031000277958810329, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -24953, -1647, -67, -15377, 11937, -14892, 20236, -13646, 12657, -9575, 14535, 11764, -6361, -28171, -286, 5952, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 9.2711619799956679e-05, 5.6319302530027926e-05, 5.6700104323681444e-05, 5.7234774430980906e-05, 8.8584274635650218e-05, 0.00012461542792152613, 5.946460078121163e-05, 5.3228635806590319e-05, 0.00010113319876836613, 9.5489012892358005e-05, 9.7263080533593893e-05, 7.7467499068006873e-05, 8.7355969299096614e-05, 9.3027119874022901e-05, 7.8020195360295475e-05, 7.294183160411194e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -31,38,-5,-6,-15,-36,-65,-31,55,-66,30,-38,70,-94,25,-127, 
  /* [1][0][][] */ -79,75,-77,-111,-48,24,-29,64,-54,3,88,-35,30,127,17,14, 
  /* [2][0][][] */ -62,-5,-79,-16,-4,-82,1,-60,-119,106,87,23,38,47,-97,127, 
  /* [3][0][][] */ -51,-52,11,-44,-69,3,-49,-115,-10,15,33,-64,-52,-30,-127,-34, 
  /* [4][0][][] */ 81,-5,-15,48,-60,3,-127,28,24,79,16,72,11,1,-42,-85, 
  /* [5][0][][] */ -71,64,-61,-29,44,-44,-23,-57,79,-28,1,-59,45,-127,-68,-99, 
  /* [6][0][][] */ -11,-42,-15,4,-99,50,30,-43,-13,-59,127,-23,-15,-18,-123,16, 
  /* [7][0][][] */ -50,107,127,-117,66,69,-19,-50,26,65,-75,-2,42,5,13,77, 
  /* [8][0][][] */ -42,-6,38,8,43,12,101,127,-61,-27,-63,-82,49,81,-55,-66, 
  /* [9][0][][] */ 69,51,94,54,-120,-18,-110,-127,84,10,107,31,-21,-123,73,-48, 
  /* [10][0][][] */ -17,-123,20,-63,-127,59,24,40,-21,-63,-15,38,-14,41,-105,25, 
  /* [11][0][][] */ 120,-61,-5,96,-109,-28,50,-4,127,103,-61,47,21,-89,-13,105, 
  /* [12][0][][] */ -50,-95,127,18,55,3,36,76,93,-21,93,62,-10,12,-76,4, 
  /* [13][0][][] */ -7,-41,20,30,17,14,127,39,-96,20,14,18,-31,107,88,-74, 
  /* [14][0][][] */ 122,-94,127,-6,104,33,121,70,101,76,83,47,54,-63,28,-58, 
  /* [15][0][][] */ -9,127,14,-52,29,113,-88,59,-59,-38,-51,-9,-34,98,-36,-53, 
  /* [16][0][][] */ -43,65,104,-41,27,81,1,1,-7,16,-4,46,77,10,81,127, 
  /* [17][0][][] */ -3,69,68,-127,35,-19,-23,-52,-70,33,0,92,-41,-8,87,-80, 
  /* [18][0][][] */ -86,-1,-77,-94,111,88,-47,-75,48,79,127,68,-8,116,-42,-9, 
  /* [19][0][][] */ 56,127,100,80,59,-32,1,2,-25,117,42,117,54,56,-53,35, 
  /* [20][0][][] */ 93,-10,7,68,-64,10,-35,65,-42,-62,-127,-39,87,-32,32,-19, 
  /* [21][0][][] */ -70,-70,-12,127,-14,7,-104,65,13,-20,20,11,-24,27,-57,-2, 
  /* [22][0][][] */ -7,17,-69,-42,127,-10,-49,93,62,77,62,75,-29,17,4,46, 
  /* [23][0][][] */ -56,26,-8,13,22,51,82,89,-11,127,-22,-39,-4,18,-58,-26, 
  /* [24][0][][] */ 29,-69,36,9,127,36,77,-30,66,23,39,20,-71,25,0,-27, 
  /* [25][0][][] */ 117,-67,90,22,5,-29,-43,99,127,-24,-43,5,116,-63,80,55, 
  /* [26][0][][] */ 58,43,97,94,87,1,-72,-11,-3,69,14,127,26,-58,33,-66, 
  /* [27][0][][] */ -53,33,-69,23,7,72,23,-76,28,-77,127,13,10,-48,96,91, 
  /* [28][0][][] */ -52,62,-98,-118,39,-68,3,-49,-127,95,-51,20,-31,56,-28,67, 
  /* [29][0][][] */ 94,92,-82,56,37,80,-29,-12,58,46,11,49,-127,4,-10,73, 
  /* [30][0][][] */ -24,85,-115,-63,83,-38,21,18,-69,68,-68,-9,16,77,-9,127, 
  /* [31][0][][] */ 30,-114,97,49,59,-74,-70,41,-21,7,21,-33,-67,53,46,127, 
  /* [32][0][][] */ -61,68,5,35,-117,56,6,62,15,-127,27,-76,30,40,37,51, 
  /* [33][0][][] */ -67,-4,64,103,2,24,-52,21,-50,-49,7,-11,-1,2,16,127, 
  /* [34][0][][] */ -16,7,-86,-90,53,-11,-17,61,27,-16,-11,-24,-47,-28,-42,127, 
  /* [35][0][][] */ 74,-3,16,-6,-4,17,-65,-34,-6,-127,-54,8,-9,-33,36,-17, 
  /* [36][0][][] */ -16,19,-127,-28,30,117,-16,45,-29,6,70,41,16,25,-78,56, 
  /* [37][0][][] */ 33,49,60,-67,48,-127,45,-11,-81,67,-53,-14,-8,30,75,57, 
  /* [38][0][][] */ -33,127,32,-44,33,25,67,-82,2,-2,-105,40,-62,-92,-84,14, 
  /* [39][0][][] */ 87,37,-125,-117,-12,-23,15,-53,11,-14,8,-39,61,0,-127,-76, 
  /* [40][0][][] */ -39,15,-82,-79,-54,0,18,-127,-13,-10,7,-37,43,79,32,62, 
  /* [41][0][][] */ -48,-103,-4,127,-4,-27,-80,-7,-8,-50,78,-64,-81,-11,1,21, 
  /* [42][0][][] */ -10,64,-18,-127,21,15,-1,-28,46,-12,-37,19,60,-31,-12,6, 
  /* [43][0][][] */ 15,38,-7,28,113,36,36,21,11,37,0,-64,-127,-33,12,-22, 
  /* [44][0][][] */ 97,-25,44,48,-20,-26,6,29,46,-29,20,20,127,-4,-59,-34, 
  /* [45][0][][] */ 10,-98,-65,45,-25,-97,-4,58,41,-29,23,36,-121,127,33,-22, 
  /* [46][0][][] */ -41,-94,51,63,5,-22,-93,60,49,-56,51,-25,27,60,65,127, 
  /* [47][0][][] */ -30,-64,12,92,5,1,63,22,14,-67,-127,-33,45,-37,-50,8, 
  /* [48][0][][] */ -69,80,-27,-19,7,76,-22,-114,29,-39,44,-54,50,-127,-50,-10, 
  /* [49][0][][] */ -54,8,46,-29,11,6,124,127,-31,-26,-8,27,-54,36,-47,22, 
  /* [50][0][][] */ 53,26,-72,40,34,-127,-49,2,-71,40,-27,-6,3,-81,-96,-33, 
  /* [51][0][][] */ -45,69,-43,127,-39,57,-32,-91,-42,-83,-3,-52,2,38,-4,122, 
  /* [52][0][][] */ -127,-2,11,10,40,57,76,22,21,-98,-50,-56,-111,-66,-107,-22, 
  /* [53][0][][] */ -51,-95,-69,-127,-49,9,1,106,50,-88,-58,35,-25,42,89,118, 
  /* [54][0][][] */ 11,-65,4,4,-70,55,48,-14,-10,-88,52,12,-27,-26,-127,33, 
  /* [55][0][][] */ -11,-40,-35,34,68,-29,68,88,-46,-53,-127,-31,56,-39,-17,35, 
  /* [56][0][][] */ 56,-30,-42,-25,-127,7,-107,-15,-8,-15,-32,25,83,-41,35,32, 
  /* [57][0][][] */ -74,7,12,-30,127,60,84,52,-26,73,9,-7,-74,105,-111,-15, 
  /* [58][0][][] */ 33,-1,-7,-9,49,-4,-31,-55,54,-127,-64,3,-67,-55,-12,46, 
  /* [59][0][][] */ -80,-15,-16,11,1,67,-100,-43,64,127,-78,19,-12,19,-3,3, 
  /* [60][0][][] */ 7,-43,-1,2,-127,-56,40,6,-19,56,-9,52,-5,-26,21,52, 
  /* [61][0][][] */ 29,32,-103,-4,-55,-17,-126,-80,-13,4,52,121,69,-63,127,61, 
  /* [62][0][][] */ 47,-25,64,-32,-10,39,46,123,-61,127,15,90,30,48,71,124, 
  /* [63][0][][] */ 27,-127,-10,-14,-73,14,37,-28,-10,-21,-7,-11,-30,117,106,29, 
  /* [64][0][][] */ -10,-14,-127,-28,36,48,23,-14,-11,-88,44,-6,70,-34,-71,101, 
  /* [65][0][][] */ -9,-12,84,71,90,-29,79,87,-24,-12,-127,-92,17,88,-80,-13, 
  /* [66][0][][] */ -49,-127,-13,-116,-64,-113,31,-53,9,-38,16,90,-76,-32,-104,88, 
  /* [67][0][][] */ -37,-94,-76,-22,-74,112,-15,-127,-72,-40,-44,-92,18,-26,-72,32, 
  /* [68][0][][] */ 127,64,23,-12,-82,3,-80,-12,-95,-122,-23,-35,12,-30,47,-85, 
  /* [69][0][][] */ 29,15,49,-38,4,-60,-42,27,-7,127,-15,-8,-14,31,54,-21, 
  /* [70][0][][] */ 19,-10,-33,67,-111,46,-9,-106,83,127,48,86,33,-32,-17,26, 
  /* [71][0][][] */ 127,-72,99,73,-75,-50,29,-38,104,20,-87,40,75,-59,31,21, 
  /* [72][0][][] */ 1,-53,30,127,78,9,-115,97,101,7,49,14,-40,-75,-58,85, 
  /* [73][0][][] */ 73,20,69,-127,87,-87,-77,49,-19,113,-61,8,28,-89,34,-49, 
  /* [74][0][][] */ 82,15,32,35,-127,-24,31,-10,-78,-47,14,-42,17,-59,6,20, 
  /* [75][0][][] */ 68,127,-85,10,66,47,-28,-32,-25,-18,51,70,-112,57,44,80, 
  /* [76][0][][] */ -85,-36,9,-56,-71,-13,87,-9,-77,35,102,51,-64,-127,-34,106, 
  /* [77][0][][] */ -67,127,-22,14,-56,-80,38,98,58,-78,-7,80,-34,57,-17,89, 
  /* [78][0][][] */ 127,38,-78,44,-75,27,-117,-14,-2,-15,-72,-7,36,-116,20,61, 
  /* [79][0][][] */ -74,-60,114,55,-37,-97,-59,-85,1,25,29,15,-61,127,-82,84, 
  /* [80][0][][] */ 73,101,28,-127,-14,36,80,-37,25,9,-41,21,93,-67,10,-13, 
  /* [81][0][][] */ 41,-61,23,-127,116,43,-7,124,112,37,-24,-50,-13,26,-93,-80, 
  /* [82][0][][] */ 74,46,85,-2,124,-127,39,56,13,110,-31,13,-35,-65,31,-89, 
  /* [83][0][][] */ -54,108,32,5,87,67,115,127,20,66,-40,-93,-121,101,-70,-112, 
  /* [84][0][][] */ 9,-98,-8,107,2,-100,-69,56,-79,61,-62,-9,-127,63,-4,-53, 
  /* [85][0][][] */ -125,85,-71,14,-50,-19,-29,-39,-8,59,26,-117,-127,-89,-40,63, 
  /* [86][0][][] */ -1,67,114,125,50,-34,48,18,-4,43,-64,-66,8,97,-127,-80, 
  /* [87][0][][] */ -25,49,127,-33,-101,-37,14,13,41,-25,18,39,-63,19,-16,0, 
  /* [88][0][][] */ -19,-65,-96,7,21,29,3,21,-23,-76,-92,-96,127,-12,13,40, 
  /* [89][0][][] */ 13,5,9,-111,21,-57,-31,52,127,-11,30,-81,-9,-42,45,-77, 
  /* [90][0][][] */ 0,76,23,1,-47,27,36,97,-9,-52,-15,127,58,13,-36,86, 
  /* [91][0][][] */ -51,-5,-23,67,84,51,-31,-102,-32,21,-14,8,-92,-127,-60,-14, 
  /* [92][0][][] */ -40,54,-7,-21,-127,14,-81,50,-56,61,98,86,-2,-3,75,7, 
  /* [93][0][][] */ 91,46,99,28,-127,-88,18,22,-23,-55,-15,-54,11,-51,-14,8, 
  /* [94][0][][] */ -41,-127,15,-123,4,42,-36,-5,82,-19,4,56,5,73,-78,55, 
  /* [95][0][][] */ -56,-79,-22,-64,116,113,-44,46,113,57,-94,54,-30,127,-90,57, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0015527945943176746, 0.0015397935640066862, 0.0018403743160888553, 0.0027677048929035664, 0.0021284844260662794, 0.0013016163138672709, 0.0016280646668747067, 0.0022519996855407953, 0.0023260486777871847, 0.00098928518127650023, 0.0032321542967110872, 0.0015492246020585299, 0.0018435613019391894, 0.0019495273008942604, 0.0021542534232139587, 0.0022905261721462011, 0.0025448452215641737, 0.0014350861310958862, 0.0016980281798169017, 0.0019376655109226704, 0.0016354862600564957, 0.0011196444975212216, 0.0011620635632425547, 0.002323272405192256, 0.0023270973470062017, 0.0017140759155154228, 0.0010968060232698917, 0.0022172422613948584, 0.0015814927173778415, 0.0023925204295665026, 0.0011402500094845891, 0.0022834679111838341, 0.001229521119967103, 0.0026759114116430283, 0.0019339552382007241, 0.0017962997080758214, 0.0024785376153886318, 0.0018388035241514444, 0.0022667059674859047, 0.0019890116527676582, 0.0026095402427017689, 0.0023748616222292185, 0.0031421622261404991, 0.0029561417177319527, 0.0025679392274469137, 0.0024930732324719429, 0.0018007472390308976, 0.00188862020149827, 0.0020199602004140615, 0.0023917169310152531, 0.0022402345202863216, 0.0024117445573210716, 0.0022646260913461447, 0.0024019046686589718, 0.0032466806005686522, 0.0029576106462627649, 0.0020668776705861092, 0.0013103191740810871, 0.0014463100815191865, 0.0027994790580123663, 0.0033278116025030613, 0.0015551032265648246, 0.0016601365059614182, 0.0027827678713947535, 0.0022132142912596464, 0.0014446279965341091, 0.001601303112693131, 0.0023889013100415468, 0.0013307079207152128, 0.0030925050377845764, 0.0017303121276199818, 0.0015407291939482093, 0.0016568308928981423, 0.0017828395357355475, 0.0020674208644777536, 0.0017424531979486346, 0.0022493675351142883, 0.002071944298222661, 0.0015963916666805744, 0.0018772558541968465, 0.0020924054551869631, 0.0018879127455875278, 0.001542793121188879, 0.0015475093387067318, 0.0021477073896676302, 0.0016871873522177339, 0.0019924964290112257, 0.0039876005612313747, 0.00086550647392868996, 0.0026260595768690109, 0.0037393548991531134, 0.0028837055433541536, 0.0010817806469276547, 0.0020975521765649319, 0.0027597947046160698, 0.0017892176983878016, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 6872, 3573, 1417, -1273, 4661, 8843, 7265, 1716, -471, 12077, 1175, -4190, 4051, 3400, 642, -95, 3313, 7183, -338, -324, 5097, 11435, 10330, -1509, -3385, -975, 11409, 144, 2281, 796, 10236, -1697, 9055, 2490, 5073, -4936, 1019, -4779, 452, 2081, 2369, 1590, 1747, -947, 1519, 2308, 4339, 4658, 4195, 2858, 4534, 2430, -2242, 2214, 812, 1896, 2461, 4821, 8216, 1150, -860, 6340, 4836, 3094, 3914, 7159, -5569, 2469, 6905, -666, 6039, 2098, 3698, 3334, 3900, 2506, -688, 2463, 3644, 3858, 3061, 3173, 7145, 1090, 2573, 5356, 1195, -807, 16244, -466, 644, -1176, 11174, 3037, -330, -1040, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00010827621736098081, 0.0001073696548701264, 0.00012832912034355104, 0.00019299179257359356, 0.00014841901429463178, 9.0761575847864151e-05, 0.00011352478759363294, 0.00015703171084169298, 0.00016219515237025917, 6.8982757511548698e-05, 0.0002253778075100854, 0.00010802727774716914, 0.00012855134264100343, 0.00013594035408459604, 0.00015021588478703052, 0.00015971816901583225, 0.0001774518023012206, 0.00010006841330323368, 0.00011840333900181577, 0.00013511322322301567, 0.00011404229735489935, 7.8072698670439422e-05, 8.1030579167418182e-05, 0.00016200155369006097, 0.00016226827574428171, 0.00011952234490308911, 7.6480173447635025e-05, 0.00015460808936040848, 0.00011027733125956729, 0.00016683021385688335, 7.9509518400300294e-05, 0.00015922599413897842, 8.5734383901581168e-05, 0.00018659104534890503, 0.00013485450472217053, 0.00012525579950306565, 0.00017282817861996591, 0.00012821958807762712, 0.000158057184307836, 0.00013869359099771827, 0.00018196298333350569, 0.00016559887444600463, 0.00021910265786573291, 0.00020613147353287786, 0.00017906214634422213, 0.00017384174861945212, 0.0001255659299204126, 0.00013169330486562103, 0.00014085162547416985, 0.00016677418898325413, 0.00015621133206877857, 0.00016817070718389004, 0.00015791215992067009, 0.00016748456982895732, 0.00022639072267338634, 0.00020623390446417034, 0.00014412317250389606, 9.136842709267512e-05, 0.00010085105895996094, 0.00019520739442668855, 0.00023204798344522715, 0.00010843719792319462, 0.00011576115502975881, 0.00019404213526286185, 0.00015432720829267055, 0.0001007337705232203, 0.00011165870819240808, 0.00016657785454299301, 9.2790134658571333e-05, 0.0002156400732928887, 0.00012065449845977128, 0.00010743489838205278, 0.00011553065269254148, 0.00012431723007466644, 0.0001441610511392355, 0.00012150109250796959, 0.00015684818208683282, 0.00014447647845372558, 0.00011131623614346609, 0.00013090086576994509, 0.0001459032209822908, 0.00013164397387299687, 0.00010757880954770371, 0.00010790767555590719, 0.00014975942031014711, 0.00011764741066144779, 0.00013893657887820154, 0.00027805499848909676, 6.0351681895554066e-05, 0.00018311486928723752, 0.00026074485504068434, 0.00020108050375711173, 7.5432457379065454e-05, 0.00014626210031565279, 0.00019244021677877754, 0.00012476198025979102, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 34,113,9,39,-25,-4,42,36,78,-78,-113,23,-6,8,16,-53,-86,20,31,22,38,56,87,88,21,-14,-51,7,-13,37,20,-27,-53,-3,-23,113,-13,61,4,-15,29,-40,-10,58,-107,-23,17,-48,-12,-58,-46,-13,32,63,-6,-11,-68,-93,-90,-127,-127,13,-105,15,-54,44,61,-10,-20,25,29,-7,-61,10,38,-14,25,-39,-73,30,-2,-73,63,-22,-59,-62,9,39,-102,24,-102,42,77,-19,66,-5, -35,-39,6,119,-8,76,-17,-16,79,20,-127,52,-23,-63,-96,127,-103,53,54,57,127,2,112,127,33,15,20,47,22,117,-6,-127,51,76,9,25,54,127,-34,-127,127,-4,76,127,-16,-72,127,-67,-6,-113,-127,-41,20,127,-18,-127,-2,28,-127,-83,-39,-127,-32,100,-44,87,127,-22,12,127,127,-4,-73,20,-42,-96,34,-58,17,127,-14,-48,127,-66,-127,-42,111,68,77,92,-91,6,127,-41,127,28, 13,-110,15,17,-25,-17,-22,41,33,60,-78,10,-6,47,13,-81,-21,18,16,14,32,41,67,82,24,-50,40,37,12,20,-6,-61,-50,-83,-22,73,-8,7,22,13,-8,35,-17,79,-53,-11,4,-22,33,-40,33,14,20,-7,5,-16,45,-98,-57,-87,-110,40,-82,2,55,15,-25,-3,-23,-23,7,7,-37,-40,-16,1,28,-15,-62,7,-6,-97,28,-10,7,-35,6,-8,-84,9,-16,35,30,24,29,-18, 
  /* [0][1][][] */ 76,4,58,127,10,-70,125,52,-23,-127,-64,127,5,-127,-71,48,-64,-41,85,31,-96,-2,-127,-69,-9,54,-115,127,-85,88,127,65,20,54,22,127,-127,54,-39,-41,52,-127,15,65,-127,-84,8,-127,-111,-64,-104,21,127,-69,100,-19,-127,-10,-47,14,-44,-73,-33,52,-101,-25,109,-84,-42,23,-48,-127,-117,70,127,-92,114,65,-95,-41,127,-110,-16,119,-36,-37,16,119,4,28,-62,31,-8,-92,82,-8, -127,1,-62,89,-73,-127,-127,-127,87,10,-26,37,-82,-127,-46,111,-127,-127,127,127,37,-127,-109,116,-127,127,18,73,-71,-28,-98,71,-127,82,127,-49,15,106,127,-67,-53,25,17,37,-42,-127,-68,-76,-7,-127,-125,127,27,75,50,-69,17,23,100,-19,-19,-51,-127,127,-10,-127,103,127,33,55,-104,-79,-13,50,-115,-127,127,127,91,-51,-92,27,-75,69,-116,-124,127,127,127,127,-127,-127,-98,-64,61,127, 27,-18,98,80,12,-45,-1,43,-40,118,-104,71,14,-15,-127,77,23,-18,20,6,-98,-3,-86,-72,0,-9,127,18,127,115,18,-112,-35,-127,-3,124,-119,36,-54,-31,-18,107,13,97,-33,-27,-1,-95,127,-61,-51,11,56,-93,-127,26,100,-10,-115,80,-29,-50,0,43,127,-47,7,-6,-64,4,-44,-48,-127,-127,-10,-49,22,-30,-127,-35,-84,-127,-11,127,-98,2,2,16,-11,-2,-9,44,-7,127,54,-15, 
  /* [0][2][][] */ 27,-127,64,-5,17,10,38,64,-29,-46,-6,-25,24,-10,-22,61,-10,36,3,24,-20,43,-4,-28,26,41,5,24,-33,50,6,16,-8,-19,-10,0,27,-26,-12,-33,4,15,-18,-12,-22,-38,-3,-40,-22,56,28,41,8,0,-15,-13,-9,-20,21,60,-40,9,18,-27,-39,40,-8,-18,38,-7,1,72,-40,21,13,-7,-12,-45,-4,4,1,5,-19,-44,-65,18,-8,10,-80,52,-5,22,-4,-9,19,-14, -61,4,127,8,127,56,-26,11,-127,25,-107,-31,127,-30,-72,24,16,54,-4,-30,2,5,41,10,70,-80,-4,59,-21,127,-12,11,-62,25,30,-37,51,27,8,-103,-29,1,-127,11,-19,7,-27,-67,-11,-26,-2,95,103,-77,-13,-71,-9,127,-22,35,73,-109,62,39,-39,21,-14,16,127,5,0,90,-49,18,-28,-70,17,-89,-40,-41,-22,-59,-15,-76,-71,127,42,13,81,58,21,22,-25,-22,16,-4, 7,73,49,-15,12,-12,-31,59,15,70,7,7,17,-5,-24,58,-13,28,2,12,-30,45,-12,-20,17,30,20,40,0,47,-18,-78,-22,-25,-4,-10,20,-42,-20,-12,4,1,-2,32,-35,-28,-3,-33,18,47,19,18,11,-13,5,9,14,-7,28,87,-36,28,10,-30,32,8,-46,18,29,-20,-4,70,-19,-17,-11,-4,9,-20,11,8,-18,-56,-15,-32,-57,18,-4,-6,-74,47,5,20,-11,2,2,-16, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.014846832491457462, 0.0076389247551560402, 0.0044449246488511562, 0.0075612561777234077, 0.01162235252559185, 0.012996985577046871, 0.015914689749479294, 0.0085545284673571587, 0.011020512320101261, 0.0084446985274553299, 0.0047977874055504799, 0.015177802182734013, 0.011298540979623795, 0.0047362656332552433, 0.0049047982320189476, 0.0053562014363706112, 0.0048091956414282322, 0.012135363183915615, 0.0054358486086130142, 0.005777762271463871, 0.010069807060062885, 0.016653357073664665, 0.010391740128397942, 0.0074952966533601284, 0.031694028526544571, 0.0094920070841908455, 0.013620024546980858, 0.0044635403901338577, 0.0092690521851181984, 0.0030987542122602463, 0.018096877261996269, 0.0084977727383375168, 0.0075783501379191875, 0.0092880139127373695, 0.011651658453047276, 0.018193213269114494, 0.0088565098121762276, 0.012106223963201046, 0.020473090931773186, 0.0049967835657298565, 0.0088026095181703568, 0.011920826509594917, 0.012741602957248688, 0.0046666846610605717, 0.0043917419388890266, 0.0042290464043617249, 0.011890447698533535, 0.0035928033757954836, 0.011912965215742588, 0.0045257252641022205, 0.0061574582941830158, 0.0050453073345124722, 0.0063926787115633488, 0.0069113862700760365, 0.011673181317746639, 0.0065657575614750385, 0.011953948065638542, 0.0099654356017708778, 0.0059937830083072186, 0.0055974847637116909, 0.006338577251881361, 0.0068147359415888786, 0.0055640502832829952, 0.0053425002843141556, 0.00954391248524189, 0.01296263188123703, 0.011948565021157265, 0.012094623409211636, 0.011121068149805069, 0.0084161125123500824, 0.011742917820811272, 0.0078342743217945099, 0.003819366917014122, 0.010469052940607071, 0.016776369884610176, 0.0044730775989592075, 0.0049238880164921284, 0.0099368738010525703, 0.007543973159044981, 0.011838248930871487, 0.012327744625508785, 0.0038967633154243231, 0.012297513894736767, 0.0089339204132556915, 0.0024508186616003513, 0.0077807968482375145, 0.0049964240752160549, 0.0062693185172975063, 0.014825404621660709, 0.0055887266062200069, 0.0039665140211582184, 0.016305794939398766, 0.011283320374786854, 0.013677465729415417, 0.006228884682059288, 0.016331171616911888, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 1220, 951, -3647, -4562, -1875, 5522, 270, -1732, -1643, -2014, 12477, -2145, -2345, 10295, 10466, -5841, 12598, -387, -6297, 463, -397, -1020, 712, -2440, 103, -2741, -2460, -6222, 47, -9736, -1312, 802, 10425, 1018, -3550, -125, 1741, -1662, 487, 6514, -330, -581, 2164, -5311, 13642, 13351, -1573, 17422, -776, 7677, 9745, -3926, -1443, -1, -1029, 10547, -176, 2339, 15634, 5142, 8608, 11054, 8908, -6927, 2300, 828, -2653, 844, -3723, -1277, 2529, 2093, 14772, 88, 579, 12294, -1987, 1526, 8253, -1117, 1805, 15062, -2542, 1664, 17718, 4058, -6355, -4918, 1242, -7075, 14147, -225, -2297, 1735, -4918, -2536, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00034933723509311676, 0.00017973940703086555, 0.00010458646283950657, 0.00017791191930882633, 0.00027346712886355817, 0.00030581143801100552, 0.00037446329952217638, 0.00020128302276134491, 0.00025930616538971663, 0.00019869879179168493, 0.00011288911628071219, 0.00035712475073523819, 0.00026584803708828986, 0.00011144154996145517, 0.00011540701962076128, 0.00012602827337104827, 0.00011315754818497226, 0.00028553797164931893, 0.00012790232722181827, 0.00013594735355582088, 0.00023693664115853608, 0.00039184369961731136, 0.00024451152421534061, 0.00017635992844589055, 0.00074574188329279423, 0.00022334135428536683, 0.00032047118293121457, 0.00010502448276383802, 0.0002180953451897949, 7.2911861934699118e-05, 0.00042580888839438558, 0.00019994759350083768, 0.00017831411969382316, 0.00021854150691069663, 0.00027415668591856956, 0.00042807561112567782, 0.00020838847558479756, 0.0002848523436114192, 0.00048171979142352939, 0.00011757137690437958, 0.0002071202325168997, 0.0002804900286719203, 0.00029980242834426463, 0.00010980435035889968, 0.00010333510726923123, 9.9506978585850447e-05, 0.00027977523859590292, 8.4536550275515765e-05, 0.00028030507382936776, 0.00010648765601217747, 0.00014488137094303966, 0.00011871311289723963, 0.00015041597362142056, 0.00016262085409834981, 0.00027466309256851673, 0.0001544884144095704, 0.00028126937104389071, 0.00023448084539268166, 0.00014103019202593714, 0.00013170552847441286, 0.00014914300118107349, 0.00016034672444220632, 0.00013091883738525212, 0.00012570589024107903, 0.00022456265287473798, 0.0003050031082239002, 0.00028114271117374301, 0.0002845793787855655, 0.00026167219039052725, 0.00019802618771791458, 0.00027630396652966738, 0.0001843358768383041, 8.9867455244529992e-05, 0.00024633065913803875, 0.00039473813376389444, 0.00010524888784857467, 0.00011585619358811527, 0.00023380879429168999, 0.00017750525148585439, 0.0002785470278467983, 0.0002900645777117461, 9.1688547399826348e-05, 0.00028935328009538352, 0.00021020989515818655, 5.7666322391014546e-05, 0.00018307757272850722, 0.0001175629222416319, 0.00014751337585039437, 0.00034883306943811476, 0.00013149945880286396, 9.3329741503112018e-05, 0.0003836657851934433, 0.00026548988535068929, 0.00032182273571379483, 0.0001465620007365942, 0.00038426287937909365, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -126,44,51,-38,-82,-21,-74,-10,-60,11,10,-35,32,51,28,-52,30,-18,91,8,-16,-62,127,61,67,16,8,37,-70,-111,-86,-5,-46,-58,27,6,-5,52,-6,33,-17,-8,-100,31,-80,-29,-21,87,-31,13,-56,-27,-4,13,26,-58,-100,-8,-16,106,67,24,4,-5,-31,-65,-54,24,-62,-68,10,-8,2,-7,-74,-49,-53,7,-57,12,-68,72,97,-80,22,42,-3,49,30,0,7,-24,-47,-34,-80,3, 
  /* [1][0][][] */ 36,22,39,-45,-68,-29,-5,19,-21,15,45,-66,3,-5,-59,-39,-18,22,-65,30,7,-91,4,62,-23,-77,-9,-59,76,-127,120,-76,62,32,-15,51,37,58,-8,-52,40,24,3,-33,15,77,-125,-48,-51,-63,-21,-33,49,-56,-35,54,-5,-2,-29,5,19,58,-16,-110,-26,-22,-60,-13,9,-25,-84,-23,-41,-21,12,-82,14,18,45,-79,-19,-40,-104,-28,28,-44,-26,22,-89,-22,-66,43,30,61,-46,61, 
  /* [2][0][][] */ 91,-41,16,18,22,-76,59,-2,-6,-2,-3,-11,-75,-36,4,-33,-92,-64,-41,57,-3,-47,-43,28,8,-69,13,-15,-32,66,-60,125,-53,127,-34,26,-8,-4,-21,-4,-112,81,77,29,-72,6,-25,-12,35,9,-24,-52,48,-20,-30,65,52,4,46,4,14,48,-30,11,87,20,-10,-4,24,60,-54,7,40,49,76,35,29,-72,64,52,86,-15,-37,23,-56,38,27,71,23,19,-20,37,-56,59,-28,45, 
  /* [3][0][][] */ 2,-12,-32,1,10,-9,0,-68,-22,68,53,58,25,-15,-66,37,16,-53,24,11,-6,127,40,-59,21,21,-17,14,66,-22,64,-25,-22,28,-33,-28,15,74,34,9,-86,-40,-43,51,-38,33,15,-3,-26,-46,-5,-24,43,-76,-37,-46,26,80,-33,13,-1,-23,-37,1,38,53,-46,9,-27,6,8,-62,-28,-50,41,-14,11,0,-50,-33,-35,7,-47,9,-5,-39,22,-26,6,33,43,-16,43,34,-49,57, 
  /* [4][0][][] */ 31,12,-43,13,16,20,-48,6,-30,87,103,-14,-13,-3,5,-51,13,-29,-36,48,17,-40,56,84,-68,-9,-127,16,-45,-67,18,14,-67,-49,18,57,11,51,24,25,-40,-46,44,-23,-6,10,-35,51,-37,55,6,20,42,-8,-85,13,58,-16,14,-6,46,-10,31,9,-41,19,-39,12,-53,34,-48,66,48,-69,-33,-52,31,-58,-16,16,-45,94,-75,-1,-24,21,32,-53,63,10,33,6,-60,-21,29,28, 
  /* [5][0][][] */ -71,32,39,-12,48,-13,57,-44,-13,38,2,-24,37,-30,-27,-39,-2,-44,47,31,-127,-12,-65,41,-33,-6,56,13,37,-64,-18,42,56,108,-15,38,-8,39,42,-12,-34,95,75,-11,-4,50,32,-6,-5,18,-21,28,7,-31,26,-91,49,-52,-61,-58,66,91,-47,-9,84,-35,-72,-60,-55,-9,-61,6,-22,14,-22,-41,19,-34,-38,-15,117,-16,37,-86,-87,37,36,-8,-44,41,30,-4,-23,34,2,87, 
  /* [6][0][][] */ 48,-14,-109,23,-50,-120,107,87,-62,79,0,82,-122,-88,52,63,9,-78,-11,7,-18,-10,-65,-78,-49,51,90,42,35,50,107,-69,31,9,14,-80,13,35,30,86,-4,14,-68,-13,-8,-77,-93,15,32,-121,-24,74,34,11,-25,-82,88,53,10,10,-109,60,-90,-8,43,6,-7,67,39,48,-9,-38,-45,26,110,41,63,-31,30,-76,-15,-59,-56,68,11,-61,55,11,-32,83,60,47,-32,17,-53,127, 
  /* [7][0][][] */ 39,80,-52,-66,-26,-13,29,-1,-58,44,-38,-51,-39,11,-1,-16,-35,-65,-43,59,-20,127,16,23,6,-4,21,38,57,62,81,-34,61,28,-22,11,0,20,-2,31,-83,-10,12,-32,11,-50,66,-28,37,-73,-82,-18,-56,14,-5,-8,33,16,-105,20,3,110,26,-23,-5,5,-48,29,-38,-11,-108,51,15,58,-28,44,-57,63,-1,-82,-27,-45,78,-82,49,-22,-14,5,2,94,-76,43,47,-22,-56,9, 
  /* [8][0][][] */ -8,79,-36,40,-29,-24,-84,27,-94,-36,3,3,-38,35,35,83,-2,-43,6,9,35,2,6,-11,-31,67,-5,27,-10,-9,-47,-35,-24,-50,-22,-66,-44,28,49,2,1,-41,32,7,-30,-37,9,-7,-24,-15,46,70,-5,-17,-62,102,-41,27,5,-34,-42,4,11,54,-37,-59,-33,-6,-36,10,8,7,-13,-48,-113,-21,-38,28,-63,-40,-29,9,-38,-27,-4,-8,15,33,6,55,-62,-14,-76,-127,11,-50, 
  /* [9][0][][] */ -18,23,-64,53,-25,-36,71,62,-11,40,-32,89,-29,-15,30,127,5,28,75,7,29,9,29,-85,-42,-7,21,-18,13,-27,35,55,-28,6,2,-116,26,-32,-20,-24,-7,23,47,-39,-4,17,24,19,40,81,23,-11,-49,-77,0,0,-7,-12,68,-30,-68,53,-62,-29,74,-14,-22,-2,-63,17,39,25,-4,83,-27,-25,-26,15,-34,-10,57,-41,55,-1,27,-17,-14,-38,-59,11,-3,-1,68,28,-35,-4, 
  /* [10][0][][] */ 72,1,-37,5,-26,-31,74,9,9,-34,-30,-12,-92,-13,10,-8,-86,-21,31,16,58,29,19,12,-58,83,37,-15,-49,-90,-30,-6,77,-30,54,14,74,-98,92,127,26,-56,12,-8,-15,-93,0,68,41,85,-77,-43,-16,29,21,56,9,-66,84,46,-19,47,-75,-15,-15,-61,26,51,26,-32,-8,33,127,37,21,-84,35,-49,71,-8,-42,32,26,28,-46,-12,2,46,-50,-25,21,55,61,65,-24,5, 
  /* [11][0][][] */ -56,-36,56,-62,16,-17,-22,-40,49,-52,-9,-14,-16,-5,16,13,-76,16,75,18,-55,11,-95,-82,-2,11,-49,32,42,-75,42,-27,20,2,24,-32,-76,0,-122,12,-69,78,-45,47,29,8,3,-34,30,-50,-64,-57,29,26,89,-54,-34,-73,20,-72,-36,-59,-36,-124,6,-74,73,70,127,23,90,-30,-35,-15,66,-46,109,33,39,52,38,-7,-46,103,78,1,-10,-16,-97,-81,-27,22,70,45,78,83, 
  /* [12][0][][] */ 38,-25,-13,-43,24,104,-10,24,46,61,12,51,20,38,5,0,-52,31,10,49,106,5,64,-74,44,24,-58,-50,-20,89,4,0,32,-13,4,-35,37,12,-33,-26,13,-24,33,61,-26,26,-6,-13,-65,27,7,17,-26,-24,8,11,-23,57,7,57,31,-81,16,-92,3,87,-18,-27,-9,-30,54,22,-13,12,-5,46,-15,43,-82,-17,-24,26,127,13,-2,72,-23,-69,72,19,-64,53,61,11,-34,-83, 
  /* [13][0][][] */ -9,32,-37,-54,-42,-14,2,-42,11,-35,-23,-76,54,-107,-53,-72,-8,-46,-87,-17,-96,-32,12,89,-21,-3,108,17,19,-25,62,38,14,-7,-127,119,-31,-52,26,-51,111,11,-10,37,-11,-92,50,-38,73,-18,-41,23,28,-3,-8,67,74,-51,-48,6,60,51,6,-94,3,26,-47,36,-71,-41,-77,13,-72,24,-39,-88,-115,16,24,76,-19,57,46,-89,66,39,33,-25,-16,1,-5,20,-65,16,-38,-1, 
  /* [14][0][][] */ -4,19,-88,-35,67,85,-91,-15,31,-36,93,-9,11,-28,-48,-68,-59,1,25,127,-8,-22,0,-8,18,31,-23,75,14,8,-19,0,55,-9,-44,-8,-17,67,66,18,50,-1,19,18,-16,-51,47,-42,15,-8,-12,-19,36,16,-38,26,24,57,-93,5,-12,-64,-37,-107,21,-35,-53,0,-78,53,-21,43,-6,-38,-15,-34,34,-10,-66,-32,20,10,10,-18,-8,33,-14,-15,-29,79,73,15,-6,-32,-58,-60, 
  /* [15][0][][] */ -73,-37,54,-54,26,-22,-29,-77,-3,10,-21,67,1,-14,43,94,-127,4,23,-70,49,-39,-11,-79,39,1,44,-58,-62,-120,-66,50,-32,70,82,-88,-2,-60,19,-26,-13,5,37,-42,4,7,82,112,-38,-9,22,-41,-42,39,13,-54,-109,-10,98,2,-37,23,-101,29,-73,-8,11,20,54,-80,84,-42,56,-27,-38,-43,13,23,61,5,-11,67,47,28,-4,-6,-120,8,-8,-70,-93,40,50,-40,-8,65, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.0020423943642526865, 0.0025558420456945896, 0.0020476889330893755, 0.0029107064474374056, 0.0029080624226480722, 0.0028622813988476992, 0.0022773246746510267, 0.0022823845501989126, 0.0036816711071878672, 0.0033639525063335896, 0.0020661244634538889, 0.0018629601690918207, 0.0034361896105110645, 0.0026488194707781076, 0.0043853437528014183, 0.0030996205750852823, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 14874, 16711, -6160, 3132, -1141, 4840, -615, 3159, 15113, -3401, -9276, 9010, -14420, 14815, 5573, 8590, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 4.8056339437607676e-05, 6.013745951349847e-05, 4.8180918383877724e-05, 6.8487213866319507e-05, 6.8424997152760625e-05, 6.7347798903938383e-05, 5.3584109991788864e-05, 5.3703166486229748e-05, 8.6627558630425483e-05, 7.9151825048029423e-05, 4.8614692786941305e-05, 4.3834359530592337e-05, 8.0851525126490742e-05, 6.2325161707121879e-05, 0.00010318456043023616, 7.293224916793406e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -5,98,-80,38,55,-19,92,66,-56,3,25,-77,73,127,-53,14, 
  /* [1][0][][] */ -23,0,-51,-30,-14,39,21,-127,22,-37,-18,-46,-12,-40,-58,10, 
  /* [2][0][][] */ -26,-24,29,78,19,46,-107,127,-24,4,78,-59,-23,-64,-41,69, 
  /* [3][0][][] */ 88,-98,84,-10,-10,-35,-39,127,-34,63,72,55,-10,57,8,13, 
  /* [4][0][][] */ -44,-26,-2,42,-90,12,-35,-127,1,-7,35,-13,35,47,107,116, 
  /* [5][0][][] */ 121,25,-41,-31,-95,21,35,64,24,-3,68,93,127,20,-94,10, 
  /* [6][0][][] */ 23,-31,-54,-44,-62,10,-5,-39,-42,-56,-33,27,84,54,127,-15, 
  /* [7][0][][] */ -61,30,-27,-82,5,-61,-76,10,-93,49,-66,-62,-127,-41,10,93, 
  /* [8][0][][] */ 47,38,76,5,51,20,67,7,60,-30,40,5,-127,-28,-79,16, 
  /* [9][0][][] */ -32,60,29,-40,-25,-13,30,-13,-31,53,-43,19,47,127,27,24, 
  /* [10][0][][] */ 88,60,-56,65,-31,-12,54,-46,-72,-49,-68,-119,-127,-73,19,95, 
  /* [11][0][][] */ 45,3,66,6,-18,-32,5,106,-86,22,-26,4,-18,-7,61,127, 
  /* [12][0][][] */ -60,-30,7,-9,14,-6,121,40,-64,32,6,-20,8,80,-57,127, 
  /* [13][0][][] */ 10,49,32,41,125,42,108,95,-44,106,-85,-68,31,89,-127,-22, 
  /* [14][0][][] */ -115,127,-1,-8,-9,10,50,9,-46,22,126,-10,-104,27,-41,55, 
  /* [15][0][][] */ -9,-21,-127,-40,82,-41,-86,-31,-18,-25,-19,-67,-4,-86,-50,44, 
  /* [16][0][][] */ 118,-12,4,-7,38,-26,46,-18,-43,10,127,50,51,9,-33,15, 
  /* [17][0][][] */ 7,13,-22,-100,-8,-59,98,-127,7,-14,-41,30,32,64,-1,51, 
  /* [18][0][][] */ 22,122,-15,-57,59,-81,-23,-61,-37,127,-22,-5,-34,51,-22,-24, 
  /* [19][0][][] */ -76,-118,121,-104,36,-127,27,-47,44,53,94,105,21,-20,65,-26, 
  /* [20][0][][] */ -22,95,67,-1,5,-1,14,-34,60,-1,101,-27,-127,-31,-86,-4, 
  /* [21][0][][] */ -70,28,28,20,59,33,57,57,-127,51,-41,19,-25,17,-56,-24, 
  /* [22][0][][] */ 23,-92,43,19,28,-127,118,15,37,-67,-50,-84,50,-84,-50,-64, 
  /* [23][0][][] */ -54,-99,45,72,43,-17,26,-42,19,-47,81,0,14,77,86,127, 
  /* [24][0][][] */ 2,2,17,83,43,20,-53,-127,68,15,-48,11,5,3,-21,-29, 
  /* [25][0][][] */ -7,31,18,-42,-27,-2,8,-28,-26,47,-47,-9,45,127,26,5, 
  /* [26][0][][] */ -68,76,7,16,27,-85,0,-33,11,22,13,68,9,2,-78,127, 
  /* [27][0][][] */ -16,-127,-51,10,-56,94,2,-55,20,-43,55,-32,33,-42,-97,-24, 
  /* [28][0][][] */ -37,1,39,75,22,9,-40,-127,-113,50,101,-10,68,8,-46,-23, 
  /* [29][0][][] */ -127,105,-18,-33,-26,24,-123,-76,-42,-29,-4,-2,5,-58,-113,64, 
  /* [30][0][][] */ 53,77,-51,77,-119,-98,-78,-20,-45,0,7,-117,127,32,-11,98, 
  /* [31][0][][] */ 127,26,-60,-28,-54,24,95,42,-56,-23,61,52,40,24,-21,2, 
  /* [32][0][][] */ -33,-16,127,-6,-21,72,76,13,-21,-14,-1,23,4,72,61,47, 
  /* [33][0][][] */ 7,30,-77,-45,-22,37,120,31,20,-24,18,-76,106,127,-42,47, 
  /* [34][0][][] */ -88,-19,91,24,33,-48,112,-3,-127,35,30,-48,55,63,-45,-38, 
  /* [35][0][][] */ 7,30,-52,19,-58,127,-31,-9,-22,107,-11,69,-56,79,29,19, 
  /* [36][0][][] */ -7,-76,127,-46,-54,20,-44,-5,20,18,-50,82,0,-82,-34,44, 
  /* [37][0][][] */ 94,-4,66,-25,118,-74,-43,39,-52,127,-72,2,-90,-40,121,-27, 
  /* [38][0][][] */ 58,50,20,-108,-16,-56,-110,68,-98,62,-115,-66,-72,-127,-107,63, 
  /* [39][0][][] */ -72,20,-60,-27,-76,-75,76,17,-127,-41,15,78,41,2,2,46, 
  /* [40][0][][] */ 127,38,2,-84,-70,30,9,-33,-24,-24,-48,-71,19,47,43,31, 
  /* [41][0][][] */ 92,-72,-63,-47,-4,-4,-59,-19,57,-28,-1,-53,127,-77,58,-35, 
  /* [42][0][][] */ -16,-90,-33,127,-4,-87,-113,25,10,10,0,50,-75,71,-58,-8, 
  /* [43][0][][] */ -87,-51,-47,-116,-62,3,-4,79,42,-127,-36,38,-18,-52,-26,94, 
  /* [44][0][][] */ -50,44,37,-53,-38,-27,37,119,117,-76,86,113,127,48,-34,11, 
  /* [45][0][][] */ 26,78,-77,92,127,-99,-45,-76,109,-66,74,-64,-35,1,-88,73, 
  /* [46][0][][] */ -17,-37,13,-2,109,-20,35,25,-15,127,-34,-126,40,71,-43,71, 
  /* [47][0][][] */ 71,-40,-34,-16,70,-15,-37,-60,-7,127,-23,30,-8,-96,-81,16, 
  /* [48][0][][] */ 6,22,-14,-127,-9,-51,114,-121,12,12,-34,45,44,58,-1,41, 
  /* [49][0][][] */ -22,118,-71,37,38,-51,68,51,-10,20,34,-93,-16,64,127,-93, 
  /* [50][0][][] */ 15,42,-20,6,-127,1,-68,-54,54,66,28,29,-34,-34,4,32, 
  /* [51][0][][] */ 127,-30,-42,-4,-39,82,-91,-35,55,-23,-39,66,-28,-54,8,31, 
  /* [52][0][][] */ -12,-50,38,74,-51,-100,-127,-4,-31,-67,-41,-75,24,-59,19,73, 
  /* [53][0][][] */ 30,98,52,-127,11,110,78,-22,-20,-27,-11,-36,84,-109,11,52, 
  /* [54][0][][] */ 26,127,6,-25,-4,-94,-116,47,4,-20,-38,127,77,85,14,68, 
  /* [55][0][][] */ -34,-19,46,30,53,-31,114,85,-73,-3,15,21,127,47,1,-3, 
  /* [56][0][][] */ 127,24,12,18,-58,123,-58,-84,-28,51,-85,4,-66,107,-13,45, 
  /* [57][0][][] */ -55,-30,-44,-40,-71,-96,59,-28,-127,-22,61,54,14,34,-11,60, 
  /* [58][0][][] */ 48,-49,63,24,8,-57,-19,10,29,-17,-127,-27,26,-29,-31,40, 
  /* [59][0][][] */ 73,9,-127,89,5,34,85,-29,-64,-48,29,-101,-112,-68,29,110, 
  /* [60][0][][] */ -6,34,-5,16,-18,-29,-25,-1,-41,-72,66,124,-53,-127,-42,0, 
  /* [61][0][][] */ -38,14,80,-99,-70,48,2,113,-16,-95,58,71,86,-10,8,127, 
  /* [62][0][][] */ 71,45,-17,-127,-19,4,10,-42,-6,34,-32,38,22,-17,-87,-69, 
  /* [63][0][][] */ -2,-34,7,-9,-65,-73,-55,5,-66,-9,-35,-15,127,-5,50,-12, 
  /* [64][0][][] */ 22,5,-12,48,-99,-41,-23,-88,54,127,37,-1,35,-60,-46,113, 
  /* [65][0][][] */ -25,11,-24,-9,-80,84,24,-22,60,-127,101,-73,81,73,-122,57, 
  /* [66][0][][] */ -116,99,-97,-77,33,-28,-116,-56,-109,116,103,2,-127,-49,48,49, 
  /* [67][0][][] */ -2,-36,-127,-118,61,75,4,-32,-28,-2,51,-19,26,37,14,54, 
  /* [68][0][][] */ 51,20,-8,-53,-69,36,9,34,-60,75,120,-12,-14,-50,-127,3, 
  /* [69][0][][] */ 66,-102,57,-48,16,-108,-39,127,-3,65,83,73,-24,70,-31,-1, 
  /* [70][0][][] */ 60,15,119,52,111,-14,127,22,41,16,-80,34,-66,76,-73,31, 
  /* [71][0][][] */ 4,29,100,-79,-127,-80,12,5,-26,-7,25,-101,-81,0,6,37, 
  /* [72][0][][] */ -56,-94,27,-114,79,-9,9,49,-73,14,-127,-22,63,122,-53,112, 
  /* [73][0][][] */ 18,15,56,-8,127,-93,-47,5,-43,99,-88,30,-86,-58,119,-17, 
  /* [74][0][][] */ -124,1,-127,-84,60,-49,-53,21,-91,15,-126,-34,-45,-65,-55,99, 
  /* [75][0][][] */ 90,-21,50,-46,16,12,-127,-25,-7,-104,64,-1,4,-10,-5,-12, 
  /* [76][0][][] */ 1,-62,-23,112,38,92,96,-50,79,-127,59,105,40,-83,-67,34, 
  /* [77][0][][] */ -35,-33,127,-18,36,-25,-30,-108,25,22,34,92,49,51,21,0, 
  /* [78][0][][] */ -44,3,9,-31,-1,-52,29,-4,29,-22,12,-91,-106,-75,-127,-54, 
  /* [79][0][][] */ -114,-77,-14,16,127,32,-26,15,15,41,-12,50,-59,-81,-79,-10, 
  /* [80][0][][] */ 10,-115,38,127,-25,-23,-99,85,2,14,65,-3,-67,-2,-12,61, 
  /* [81][0][][] */ 108,66,-8,88,-9,37,19,127,24,10,108,62,116,27,67,-26, 
  /* [82][0][][] */ -58,5,8,-36,31,-127,-114,-89,7,76,-40,-31,-30,97,-77,-21, 
  /* [83][0][][] */ 99,-21,94,-37,-44,-16,-127,-7,21,-126,12,-52,-22,-13,8,-19, 
  /* [84][0][][] */ 9,-76,-92,23,127,35,35,28,-110,22,-107,-21,45,-41,-79,19, 
  /* [85][0][][] */ 17,81,39,-36,101,6,41,-97,127,-44,33,-17,93,-72,16,-5, 
  /* [86][0][][] */ 125,-36,127,52,8,-56,77,43,-60,-50,-102,-43,41,22,-65,8, 
  /* [87][0][][] */ -8,11,16,-81,66,-31,-41,8,30,-33,74,-37,-81,-127,-9,26, 
  /* [88][0][][] */ -52,-27,33,1,24,30,-64,-44,3,8,-74,-127,-41,-36,-13,-20, 
  /* [89][0][][] */ -79,19,14,-72,24,4,-127,17,78,26,-66,-8,-16,-78,-49,-15, 
  /* [90][0][][] */ -7,-13,-31,-69,127,24,-58,42,42,50,20,-10,35,19,-60,-24, 
  /* [91][0][][] */ -38,-61,10,57,-29,-9,-4,78,-40,-63,27,-49,4,67,28,127, 
  /* [92][0][][] */ -17,79,-4,-5,-18,60,-85,51,-32,-8,60,-1,-27,127,52,18, 
  /* [93][0][][] */ -24,79,-48,-87,65,89,-91,2,62,74,74,53,-127,20,-59,90, 
  /* [94][0][][] */ 22,62,107,9,-127,-40,10,-12,15,-22,29,-16,-57,-26,13,-20, 
  /* [95][0][][] */ -15,25,54,-5,127,-24,-105,71,21,19,-78,96,-12,-4,94,-30, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0018783011473715305, 0.0028879982419312, 0.0019879741594195366, 0.0015397031093016267, 0.0018191162962466478, 0.0026043693069368601, 0.0018653118750080466, 0.0020446432754397392, 0.0020148130133748055, 0.0022144333925098181, 0.0015405874000862241, 0.0022725721355527639, 0.0014392979210242629, 0.0010503949597477913, 0.0012506232596933842, 0.0019504619995132089, 0.0035221853759139776, 0.0023334955330938101, 0.001720316824503243, 0.0012437927071005106, 0.001797641976736486, 0.001662355731241405, 0.0015052803792059422, 0.0021832799538969994, 0.0025682204868644476, 0.0021128673106431961, 0.0017889211885631084, 0.0022616488859057426, 0.0016960068605840206, 0.0020744514185935259, 0.0013831810792908072, 0.0032407850958406925, 0.0021774617489427328, 0.0017477791989222169, 0.001217282610014081, 0.0017133122310042381, 0.0021851202473044395, 0.0019272706704214215, 0.0015990532701835036, 0.0016655880026519299, 0.0023349570110440254, 0.0014016549102962017, 0.0024271085858345032, 0.001803609193302691, 0.0024199178442358971, 0.0016745299799367785, 0.0020474321208894253, 0.0021323980763554573, 0.001037015113979578, 0.0017139904666692019, 0.0024171001277863979, 0.0016896197339519858, 0.001137092593125999, 0.0022803656756877899, 0.0021507660858333111, 0.0020955258514732122, 0.0019714995287358761, 0.0018292949534952641, 0.0022835205309092999, 0.0017089105676859617, 0.0025201274547725916, 0.002039661630988121, 0.0022107267286628485, 0.0016263383440673351, 0.0014530419139191508, 0.0018134396523237228, 0.0011127996258437634, 0.0019590964075177908, 0.0017668846994638443, 0.0021123106125742197, 0.0016008944949135184, 0.0017619447316974401, 0.0015078637516126037, 0.0021095543634146452, 0.0015059510478749871, 0.0012963839108124375, 0.0018182100029662251, 0.0016189776360988617, 0.0020175371319055557, 0.0019759261049330235, 0.00089418701827526093, 0.0019727700855582952, 0.0021826180163770914, 0.0016001630574464798, 0.0021827344316989183, 0.0019648049492388964, 0.0019386459607630968, 0.0018036675173789263, 0.0027857739478349686, 0.002912924624979496, 0.002347537549212575, 0.002106070052832365, 0.0019389715744182467, 0.0012193172005936503, 0.0034802185837179422, 0.0022301441058516502, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1050, -15, 3096, 5374, 3723, -1644, 3366, -1193, -2189, -700, 4396, -2053, 4062, 6088, 2439, 2168, -500, -365, -1718, 5418, 2593, -604, 2504, -555, -1057, 3076, 1650, 1588, 4582, 2209, 4076, 809, 1509, 3729, 5556, 3022, -478, 2529, 2587, -3449, -284, 1682, -59, 1535, -976, 536, -1396, 722, -7077, 1593, 1035, -2874, 6871, -986, 1752, 1246, 1033, 2375, -785, -1832, 269, 1420, 445, 4491, 5047, 2674, 3808, 3999, 4079, -730, 3110, 4270, 3264, -1217, 5120, 6557, 443, -4134, 493, 1120, 10214, 1517, -357, -2873, 1097, 554, 1520, -2276, 2383, -271, 2679, 1101, -96, -3756, -123, 1304, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00017495806969236583, 0.00026900830562226474, 0.00018517377611715347, 0.00014341868518386036, 0.00016944517847150564, 0.00024258911435026675, 0.00017374815070070326, 0.00019045233784709126, 0.00018767373694572598, 0.00020626776677090675, 0.00014350104902405292, 0.00021168321836739779, 0.00013406624202616513, 9.7841111710295081e-05, 0.00011649177031358704, 0.00018167962844017893, 0.00032808090327307582, 0.00021735804330091923, 0.00016024229989852756, 0.00011585552420001477, 0.00016744490130804479, 0.00015484340838156641, 0.00014021231618244201, 0.0002033659111475572, 0.00023922196123749018, 0.00019680718833114952, 0.00016663259884808213, 0.00021066574845463037, 0.00015797790547367185, 0.00019322887237649411, 0.00012883913586847484, 0.00030186932417564094, 0.00020282396872062236, 0.00016280033742077649, 0.00011338618787704036, 0.00015958985022734851, 0.00020353733270894736, 0.00017951942572835833, 0.00014894697233103216, 0.00015514447295572609, 0.00021749417646788061, 0.00013055991439614445, 0.00022607781284023076, 0.00016800074081402272, 0.00022540801728609949, 0.00015597739547956735, 0.00019071210408583283, 0.00019862642511725426, 9.6594820206519216e-05, 0.00015965302009135485, 0.00022514555894304067, 0.0001573829649714753, 0.00010591673344606534, 0.00021240915521048009, 0.00020033735199831426, 0.00019519188208505511, 0.00018363921844866127, 0.00017039327940437943, 0.00021270301658660173, 0.00015917985001578927, 0.00023474224144592881, 0.0001899883063742891, 0.00020592250803019851, 0.00015148849342949688, 0.00013534646132029593, 0.0001689164200797677, 0.00010365391790401191, 0.00018248389824293554, 0.00016457996389362961, 0.00019675533985719085, 0.00014911848120391369, 0.00016411981778219342, 0.00014045294665265828, 0.00019649860041681677, 0.00014027478755451739, 0.0001207542372867465, 0.00016936076281126589, 0.00015080286539159715, 0.00018792747869156301, 0.00018405153241474181, 8.3290811744518578e-05, 0.00018375755462329835, 0.00020330425468273461, 0.00014905034913681448, 0.00020331511041149497, 0.00018301562522538006, 0.00018057900888379663, 0.0001680061686784029, 0.00025948640541173518, 0.00027133012190461159, 0.00021866601309739053, 0.00019617404905147851, 0.00018060933507513255, 0.00011357570474501699, 0.00032417182228527963, 0.00020773116557393223, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 17,72,30,-87,-75,13,-4,82,-9,-32,-122,-107,-102,115,-49,73,44,102,32,8,-32,-100,-40,23,102,-102,10,117,64,-73,71,0,-83,95,33,-60,-20,9,-86,-17,-104,-52,107,-66,69,-15,-80,116,-96,87,-83,0,-24,94,2,50,-74,-83,-4,23,-10,93,48,-127,79,-113,-95,60,60,-86,-9,124,-51,32,-40,116,-47,-52,-23,-8,-114,39,80,17,-45,-65,-69,-44,34,51,39,54,-98,-79,-56,44, 
  /* [1][0][][] */ 71,11,81,41,31,-69,-2,126,35,63,-75,69,-109,-106,32,-71,-56,-30,15,-26,106,89,-85,-70,42,-4,-27,-63,93,53,-21,-66,-85,-83,-88,-73,42,-68,-40,19,3,100,-4,37,38,4,-36,44,20,-119,4,-63,-7,-104,-52,-109,37,50,99,2,69,-77,-31,-34,126,-8,5,96,82,93,50,120,4,28,60,38,71,-70,127,-9,-78,94,-64,71,32,24,-119,39,-52,-57,68,-22,-29,26,43,12, 
  /* [2][0][][] */ 7,-62,-71,-94,-36,19,70,-1,23,-42,-58,-40,47,78,-64,-103,-84,30,-37,32,-82,-36,28,22,-65,65,-40,-43,-17,-32,-69,33,48,-60,48,8,-70,34,-67,60,56,-21,109,68,-48,-11,47,27,-16,-43,4,113,-75,-70,15,-61,-33,22,75,105,90,76,-57,98,100,82,-68,-71,3,29,63,-19,31,30,-14,-56,88,104,-93,-62,-72,127,75,45,-55,34,45,28,68,79,79,103,-40,-33,78,100, 
  /* [3][0][][] */ -83,93,59,-87,102,105,77,69,99,17,39,-62,102,42,104,110,-127,69,-64,100,-78,74,-83,2,108,74,-109,15,51,31,-46,108,-107,26,24,-99,-98,-43,-88,-63,-93,-42,-67,19,-79,-107,-31,-38,-64,107,-38,-94,8,43,99,-69,-88,-109,65,-94,-90,28,-97,-32,7,87,-62,-41,-42,-46,84,0,85,85,-58,-79,-125,-59,78,-66,57,117,-85,-86,77,-121,102,-94,-37,-115,92,96,-93,-58,30,-40, 
  /* [4][0][][] */ -103,35,82,-14,68,12,-18,-47,15,63,-97,-64,-77,93,25,-99,81,48,-42,-78,-95,72,-112,-36,-25,-122,94,48,11,-112,125,33,-115,48,-59,-54,96,-22,-117,-102,114,106,-110,-104,-18,91,-48,-41,125,-34,123,127,93,-110,-7,34,-113,-24,109,-56,87,-32,-16,89,-49,32,-116,-79,27,92,25,-5,-68,-12,23,-71,-25,85,-39,40,31,-113,51,6,49,126,13,-69,-26,-11,96,59,92,-18,-100,-118, 
  /* [5][0][][] */ -99,120,-40,-55,32,-23,-47,71,-13,-89,59,41,-77,32,116,115,-113,127,106,-5,117,11,-50,113,-115,53,-29,-56,-23,44,69,-1,-70,74,73,62,114,-62,-55,-37,81,-10,-10,-52,105,120,11,-2,30,101,106,35,-82,-38,50,-42,102,-40,-67,66,64,75,1,68,80,-52,55,56,106,-64,42,11,-98,85,26,-86,-54,68,40,4,81,96,-88,-56,51,-25,-99,-7,87,117,-30,120,-14,111,1,100, 
  /* [6][0][][] */ 109,-20,2,-100,-110,-27,65,-104,15,81,32,112,49,-73,-28,119,-78,97,35,90,-116,106,95,25,-54,46,-113,-104,-49,-95,8,53,-95,19,70,79,-116,-51,9,56,-83,55,71,1,-110,80,-103,-31,61,102,-2,-6,-77,-100,-62,-91,-73,-11,2,81,52,-50,94,17,127,91,-24,52,-2,-100,-54,-20,65,-54,95,114,-44,46,-53,-87,25,-25,-40,-94,77,2,-7,117,-6,-99,-96,-39,-84,-2,106,-95, 
  /* [7][0][][] */ 59,30,-43,-88,80,-10,-16,-50,15,-62,-8,-8,-40,82,72,43,57,-5,-39,39,53,-76,-11,-46,79,-57,39,79,-75,-27,-11,16,-94,-34,47,-27,85,-1,-5,-80,-76,32,-49,59,8,-50,-72,-46,45,-17,-29,127,-37,29,50,24,56,-92,-3,-27,12,-62,-40,-42,-7,-47,-88,-78,31,-85,-96,3,-86,56,-29,50,-56,-40,-61,-9,-83,70,0,58,-50,-64,-17,-66,34,85,83,-67,28,-70,67,-79, 
  /* [8][0][][] */ -70,-62,-122,-11,57,-17,-34,-104,90,-127,123,-105,-31,-115,-127,-8,18,83,83,-78,101,58,96,-62,-90,-117,17,-113,-86,-89,-114,-15,-50,-12,-98,116,-122,-111,-52,-76,-31,12,39,-27,-24,-69,-26,98,68,77,-40,-44,117,20,-18,-111,-14,-4,-18,13,-106,-19,-116,96,-22,-50,9,-79,-85,34,-117,56,46,90,125,87,87,-11,-17,-30,35,89,-7,58,69,-64,-29,75,60,57,-72,76,-120,116,119,-60, 
  /* [9][0][][] */ -32,-40,24,80,27,64,83,28,7,45,66,66,103,55,-34,-26,-5,-66,-71,-81,-93,81,22,-22,-83,-64,-49,50,63,-120,-32,54,-93,-66,110,-27,-32,1,-76,-68,99,94,7,4,42,62,26,-23,-35,-38,-105,-49,-108,22,27,75,-4,-77,9,16,0,-68,28,79,-127,75,68,64,96,-56,-109,11,46,30,64,-106,112,-71,8,-47,-111,-25,80,-80,60,-73,-86,17,-74,87,33,10,-81,22,25,66, 
  /* [10][0][][] */ -99,37,-88,-101,-51,86,-127,-111,78,-110,83,67,-15,27,66,-13,108,6,-92,32,-16,-70,-48,81,28,103,-40,-35,-119,-88,-19,-114,58,30,103,-124,111,-90,36,112,82,30,26,53,-17,25,-10,-13,-93,124,87,124,97,-110,93,57,19,-19,76,-9,70,59,90,54,-47,101,-9,49,-1,-17,69,22,-108,-115,19,52,69,93,73,-3,-7,53,0,33,9,68,-87,23,-20,28,-66,85,44,64,20,-23, 
  /* [11][0][][] */ 83,74,-60,-87,98,-4,-43,-85,-90,49,45,-8,29,-79,59,-74,-114,83,-18,-50,-40,-43,70,-76,-98,103,78,96,10,54,4,43,58,90,-115,-70,20,114,-50,-70,54,-115,115,-102,89,29,-102,-16,60,81,-59,79,65,-68,-45,-102,-28,88,-104,70,-33,11,127,-57,70,-22,102,3,99,98,-53,27,-82,-52,26,-99,-8,81,-73,-5,-91,-34,-115,82,-1,-69,-57,-24,-80,53,-28,-49,89,38,118,7, 
  /* [12][0][][] */ -29,-31,-35,127,36,-17,-10,-84,-8,26,-3,46,-28,-25,-32,57,38,-34,21,119,-62,5,102,75,27,101,-64,44,98,-81,81,91,56,3,32,-25,27,-36,54,55,85,106,73,-39,68,9,-16,74,-78,114,-29,99,-12,-77,86,81,40,-56,-23,-27,48,-4,91,21,-40,22,1,-32,-78,-53,75,-2,-64,-26,-4,16,-23,1,67,-17,63,103,74,23,96,-30,33,-61,-21,-64,23,28,-73,-94,-60,102, 
  /* [13][0][][] */ 35,51,74,-61,93,11,18,-37,35,-101,30,30,-2,70,44,72,81,58,16,81,109,-9,-17,-63,70,-72,12,-65,34,-77,-54,-23,-20,-99,28,-2,72,-98,78,44,-25,-79,64,84,40,-9,59,73,-63,48,-38,-23,-34,-80,-2,66,19,-42,64,-72,-88,-5,81,-61,-73,33,-22,-94,-75,-51,-87,87,-32,-15,101,-27,-35,93,-4,-39,68,12,5,80,81,-36,-117,80,-50,-42,33,-32,51,127,-27,-87, 
  /* [14][0][][] */ -50,-63,99,60,59,-94,19,-6,-8,70,-33,-63,0,113,-25,43,-106,-30,-24,-105,-6,40,-56,-39,-48,-24,76,27,79,-78,83,-49,-41,100,123,27,31,72,-89,-90,111,120,121,29,81,-80,-7,-52,-112,6,-29,-71,-11,-117,96,-115,26,-91,-43,-112,-93,-91,22,16,-7,69,12,-11,-108,-11,30,-60,-106,-85,59,-12,-102,-17,76,5,127,-39,122,40,-85,-68,-71,81,61,-6,-73,-24,-12,-103,-77,-61, 
  /* [15][0][][] */ 21,51,-14,-76,-103,90,6,59,-127,-43,102,-45,-16,-62,-47,-43,-39,98,-106,17,-30,-100,-65,-31,-16,-9,105,105,-23,-82,-125,22,58,103,-45,-29,-33,98,-35,-94,-66,112,100,-63,81,46,-82,-98,33,-38,-36,-114,-88,0,29,9,45,-14,90,-58,-125,-98,-100,-67,-49,26,-15,-81,-21,-83,-90,13,68,36,0,77,-43,103,-109,-43,-35,-85,-49,-70,-64,-42,97,-42,54,-110,-94,97,-12,-51,111,-98, 
  /* [16][0][][] */ -12,18,-105,118,82,-70,99,100,-44,39,80,-73,-58,86,-126,-37,28,74,-61,-33,-123,-23,-108,10,111,-70,-85,18,-55,91,106,30,-85,-53,14,8,-18,95,-123,57,45,33,78,-62,-100,-18,-105,-65,-32,45,89,83,-45,-127,55,6,45,87,-45,-70,32,-31,-5,62,-18,26,63,-51,-6,-56,75,12,72,5,42,-84,77,-59,-103,-55,-33,36,-15,-101,93,-71,3,-121,107,-99,91,-112,44,17,70,-88, 
  /* [17][0][][] */ -15,95,-104,-36,-27,39,-45,109,31,-30,100,-23,-32,102,38,-56,28,83,-20,69,23,-12,-57,-14,-104,11,-30,-74,-35,51,67,-98,65,-34,-27,48,41,-53,-18,44,-40,107,-23,-76,103,24,-76,-87,35,-106,-6,-127,-70,18,46,22,-64,85,-57,-67,103,99,74,80,-50,39,-86,76,-63,-67,14,-17,-31,-33,0,49,-111,-54,113,-93,-57,-20,99,-59,76,41,-53,103,18,125,-28,66,-85,-50,72,-32, 
  /* [18][0][][] */ 75,-113,-126,-23,57,13,-121,-99,-63,44,-89,-85,-9,94,22,33,16,95,-91,-45,-89,49,21,34,13,-24,38,-113,-23,-124,29,-122,-32,85,113,-65,25,-46,-64,-86,-106,21,109,-66,-30,35,97,-66,96,4,-53,-108,-54,3,-42,30,69,25,-127,58,-109,-29,68,108,-17,22,-100,-113,101,-45,-82,91,-106,107,-4,113,19,93,-12,-32,-69,-58,-104,89,1,-66,96,9,72,19,-50,116,-103,-14,-3,-124, 
  /* [19][0][][] */ 67,71,-96,81,112,79,-61,16,99,-37,8,-41,74,78,122,-39,37,-89,-29,118,-83,-79,31,123,71,-8,38,-22,85,49,114,-114,73,-19,-84,88,-100,-24,-59,24,68,34,54,54,-37,50,-103,109,127,22,92,-42,69,-75,86,102,52,17,-96,-51,-33,69,117,-43,103,-4,-66,95,117,-7,-94,14,22,82,23,98,10,91,-74,124,-102,-68,113,-105,43,21,81,-74,-72,0,-14,20,-18,-34,85,-112, 
  /* [20][0][][] */ -10,-98,-22,68,95,27,88,41,-57,-76,21,-3,-34,-86,-6,-97,-21,-65,107,41,57,-121,100,-29,-94,110,-90,15,2,-83,-48,6,38,99,81,-65,104,25,-112,14,104,-101,-87,-29,51,26,-47,-47,71,-2,115,-43,4,88,31,-88,-52,-127,77,17,-36,89,69,84,31,98,26,-84,31,89,-74,21,-103,-86,-43,121,-3,-98,39,-76,17,124,87,-37,61,17,-69,-118,117,16,-117,-88,61,-71,31,82, 
  /* [21][0][][] */ 67,95,94,-90,-43,-58,-97,-46,-35,98,11,-94,-57,-79,-97,-107,-34,-25,-75,-109,-43,53,95,-58,83,24,73,-27,-64,-106,88,-7,-99,18,92,95,-112,-89,-115,19,-8,34,-49,4,-83,81,-121,63,64,-127,-19,-85,48,-55,-116,-63,-43,-70,73,72,3,-48,-12,49,-53,36,-71,-11,-12,-58,-16,-1,-39,-102,-61,-7,-100,106,101,80,-54,85,-4,-33,-125,-79,9,21,-54,37,-76,75,-38,-80,91,-37, 
  /* [22][0][][] */ -3,-39,66,1,-39,-72,127,25,28,-2,20,25,-40,55,-31,-60,-72,-7,-74,87,40,95,37,90,-34,54,-67,83,-22,-79,-19,-35,-45,113,47,50,28,-46,-59,-43,0,46,-45,25,85,-3,101,-55,-66,26,-73,122,-22,102,12,75,122,81,-33,117,-40,-14,-3,63,81,-66,-82,-4,51,85,-42,-22,13,91,-54,28,-29,-62,49,-16,114,-13,-87,8,74,100,23,88,60,83,104,31,-82,41,106,95, 
  /* [23][0][][] */ -43,11,18,-42,-95,6,63,24,26,-106,63,-116,-115,87,77,-40,35,51,60,27,60,107,63,-7,47,-55,-68,-62,-102,92,-7,121,84,-65,114,-20,-1,114,89,-85,123,40,108,-97,-112,1,-100,117,35,94,-44,-32,-90,127,72,1,29,4,51,-32,-46,63,93,-127,118,-96,21,-8,106,114,-81,122,112,40,31,-45,-124,20,-93,-10,-115,-1,-94,-102,-61,-119,110,-115,-37,-71,-31,-78,12,-46,-82,116, 
  /* [24][0][][] */ -5,100,122,105,71,-17,-105,119,4,-94,-78,94,30,2,2,-53,-19,50,-53,92,127,-19,-19,40,-25,70,-58,-50,97,127,104,-24,121,-41,-5,-18,26,-43,-75,-81,8,105,-74,54,-45,80,56,-57,-85,-60,39,-37,-51,89,120,-47,60,-37,-12,-30,117,49,64,-18,-108,1,-54,120,77,-80,-11,40,5,-105,-5,-32,30,-48,-21,79,73,-62,67,-57,-79,-61,-22,-53,-78,91,-46,-18,-61,-59,76,108, 
  /* [25][0][][] */ 15,15,15,82,25,40,-13,3,-21,64,82,39,-55,89,51,-36,-27,-7,-64,33,47,81,35,76,75,-23,-55,11,61,34,-24,78,-38,-12,87,94,-61,73,-66,81,-30,127,69,30,39,-17,-48,-64,-33,57,-53,23,37,17,-51,-23,64,-22,120,55,-39,80,-53,69,-40,-32,-73,86,11,12,50,52,20,67,-4,43,66,4,31,-45,-18,41,-52,75,104,52,24,22,-27,94,-10,5,-4,24,98,75, 
  /* [26][0][][] */ 79,-88,-10,-9,81,-105,103,-50,41,-34,-92,-3,-45,-66,31,-28,103,4,-81,-82,42,-53,68,88,-3,-36,40,42,19,-14,-51,-41,-30,47,41,111,-8,97,-127,102,98,13,-35,-107,-9,54,116,8,13,64,83,-2,97,96,62,36,93,-3,-63,-12,10,110,-93,-115,47,-35,-117,-36,-8,-58,31,36,-118,-57,-92,-78,-21,17,-30,55,104,32,-55,-5,-10,-46,-7,-98,23,10,88,104,-53,47,43,-38, 
  /* [27][0][][] */ 59,36,-126,116,-39,-35,2,-13,-101,91,-37,-20,-126,74,76,-59,44,-126,-14,-122,-34,53,82,-101,-124,70,-51,46,88,-73,61,-123,108,-96,30,106,107,57,-86,-52,31,53,-33,56,63,-100,105,-78,-27,-66,57,96,110,55,-127,-98,97,-40,-35,12,30,-91,-124,-104,26,108,19,-106,34,-14,31,-119,17,-80,-5,-94,-94,-11,66,13,-70,-80,85,0,-115,-104,56,-43,108,11,45,105,89,30,61,-109, 
  /* [28][0][][] */ -117,127,-40,79,18,98,-109,4,63,-65,-97,83,71,-76,30,-94,-66,84,46,99,107,80,13,-82,70,-63,88,121,-47,30,-18,39,-22,22,-30,-52,47,99,-30,125,-96,-36,-1,73,107,113,-11,13,122,-7,-106,-16,65,-35,27,59,89,52,48,80,52,-21,12,-118,-71,1,100,-40,-79,64,72,120,-103,54,127,35,65,-36,-3,86,-67,46,69,-40,55,21,-84,-55,-90,27,90,-81,55,71,-13,97, 
  /* [29][0][][] */ 20,-12,41,18,-26,13,24,-107,-53,-27,-51,-98,76,-21,-77,-18,99,106,-61,107,37,-68,-88,-95,96,-60,-93,-43,-42,101,-60,29,-109,127,116,5,-20,-96,35,-28,122,-57,-19,41,-87,68,-115,15,-27,63,34,32,-82,-4,92,86,46,-16,-64,0,126,109,-65,39,89,-81,-112,46,81,-13,-33,-47,-22,-125,-19,-97,-59,39,9,72,-4,-58,39,-51,25,-110,-87,98,-10,46,-66,-62,-106,4,-73,-76, 
  /* [30][0][][] */ -81,-90,-91,-61,68,98,54,12,-80,40,31,54,101,57,-105,-113,99,123,87,9,-8,-80,127,-82,18,62,-23,18,88,-40,10,45,-1,-29,28,30,-88,-40,91,-21,-11,-106,-77,-86,80,123,-39,-30,-65,106,-95,-67,-116,-15,97,-113,97,60,-2,-15,-49,-109,56,83,124,105,35,73,100,80,116,-80,36,-121,-87,25,60,-27,-1,-39,50,37,112,28,82,-57,58,45,117,45,61,-122,14,90,-80,-79, 
  /* [31][0][][] */ 44,110,68,-35,-68,-7,97,-87,-79,-52,58,-63,-82,-79,87,16,-11,42,-31,25,-26,-40,91,3,65,86,-45,-63,-22,73,54,68,73,32,52,101,42,112,-20,-87,-4,106,-91,30,26,98,43,-12,-115,-11,-60,85,22,-89,-12,-3,16,28,28,116,-7,-127,107,-103,18,-92,70,-67,-112,31,108,-35,68,-60,-41,55,-7,76,49,-83,-5,5,-113,-72,-28,73,119,-105,-70,79,34,-26,-44,-43,-110,78, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.001784537686035037, 0.0018222277285531163, 0.0019993919413536787, 0.0017965169390663505, 0.0017526180017739534, 0.0018215141026303172, 0.0017797120381146669, 0.0023469182197004557, 0.001697979518212378, 0.0017798730405047536, 0.0017379075288772583, 0.0017526561859995127, 0.0024238296318799257, 0.0021037163678556681, 0.0017215646803379059, 0.0018116508144885302, 0.0017964316066354513, 0.0018389755859971046, 0.0017466353019699454, 0.0017496396321803331, 0.0017880345694720745, 0.0018554517300799489, 0.002470098901540041, 0.0016999678919091821, 0.0018169005634263158, 0.002719715004786849, 0.00179619702976197, 0.0017414434114471078, 0.0018197792815044522, 0.0017467893194407225, 0.0017273201374337077, 0.0018126346403732896, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 33, 228, 111, -315, 205, 213, 351, -181, -249, -104, -316, 132, 1778, -43, 95, -250, -253, 253, -183, 223, -56, -683, 1825, 147, 202, 1885, -186, -279, 186, 135, 169, -200, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.1989122109953314e-05, 4.2875948565779254e-05, 4.7044515667948872e-05, 4.2270989069947973e-05, 4.1238072299165651e-05, 4.2859155655605718e-05, 4.1875577153405175e-05, 5.5221607908606529e-05, 3.9952461520442739e-05, 4.1879367927322164e-05, 4.0891944081522524e-05, 4.1238970879931003e-05, 5.7031287724385038e-05, 4.9499209126224741e-05, 4.0507406083634123e-05, 4.2627078073564917e-05, 4.2268980905646458e-05, 4.3270014430163428e-05, 4.1097300709225237e-05, 4.1167993913404644e-05, 4.2071402276633307e-05, 4.3657688365783542e-05, 5.8119974710280076e-05, 3.9999245927901939e-05, 4.2750602005980909e-05, 6.399329868145287e-05, 4.22634620917961e-05, 4.0975141018861905e-05, 4.2818337533390149e-05, 4.1100927774095908e-05, 4.0642826206749305e-05, 4.2650226532714441e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -31,-31,-35,-40,105,-6,113,11,52,-72,-77,-54,107,-47,117,-8,-74,-6,86,6,85,-27,127,-50,-42,113,16,-86,-78,-92,27,28, 
  /* [1][0][][] */ 94,127,-93,-74,11,104,12,-51,67,-103,-89,59,-106,4,29,83,-89,99,100,77,-71,0,-50,50,108,-25,-81,-88,65,90,115,-110, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.004067630972713232, 0.0033896393142640591, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 35801, -42369, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00015385822916869074, 0.00012821318523492664, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,160,160,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,160,160,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,160,160,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.1006845235824585, } };
const TfArray<1, int> quant46_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,160,160,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,161,161,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.066473044455051422, } };
const TfArray<1, int> quant50_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.066568844020366669, } };
const TfArray<1, int> quant53_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.089264824986457825, } };
const TfArray<1, int> quant54_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,81,81,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,40,40,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,40,40,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.057147186249494553, } };
const TfArray<1, int> quant58_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,40,40,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023444537073373795, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,40,40,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,40,40,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.055666975677013397, } };
const TfArray<1, int> quant61_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,40,40,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.069729901850223541, } };
const TfArray<1, int> quant62_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,40,40,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,40,40,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,40,40,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.052240185439586639, } };
const TfArray<1, int> quant65_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,40,40,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.093146972358226776, } };
const TfArray<1, int> quant66_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,40,40,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,40,40,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.037825021892786026, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,40,40,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10357083380222321, } };
const TfArray<1, int> quant69_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,40,40,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 102400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 409600, (TfLiteIntArray*)&tensor_dimension44, 409600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 409600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 409600, (TfLiteIntArray*)&tensor_dimension46, 204800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1244208, (TfLiteIntArray*)&tensor_dimension47, 1228800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 1244208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1244208, (TfLiteIntArray*)&tensor_dimension49, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 614400, (TfLiteIntArray*)&tensor_dimension50, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 307200, (TfLiteIntArray*)&tensor_dimension51, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 307200, (TfLiteIntArray*)&tensor_dimension53, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 314928, (TfLiteIntArray*)&tensor_dimension55, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 314928, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 314928, (TfLiteIntArray*)&tensor_dimension57, 76800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 391728, (TfLiteIntArray*)&tensor_dimension58, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 153600, (TfLiteIntArray*)&tensor_dimension59, 153600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 153600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 153600, (TfLiteIntArray*)&tensor_dimension61, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 307200, (TfLiteIntArray*)&tensor_dimension62, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 153600, (TfLiteIntArray*)&tensor_dimension63, 153600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 153600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 179200, (TfLiteIntArray*)&tensor_dimension65, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 153600, (TfLiteIntArray*)&tensor_dimension66, 25600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 153600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 153600, (TfLiteIntArray*)&tensor_dimension68, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension69, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
